"# Hello, world!\n\nImport Sionna:\n\n\n```python\nimport os\ngpu_num = 0 # Use \"\" to use the CPU\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = f\"{gpu_num}\"\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n# Import Sionna\ntry:\n    import sionna\nexcept ImportError as e:\n    # Install Sionna if package is not already installed\n    import os\n    os.system(\"pip install sionna\")\n    import sionna\n# IPython \"magic function\" for inline plots\n%matplotlib inline\nimport matplotlib.pyplot as plt\n```\n\n\nLet us first create a [BinarySource](https://nvlabs.github.io/sionna/api/utils.html?highlight=binarysource#binarysource) to generate a random batch of bit vectors that we can map to constellation symbols:\n\n\n```python\nbatch_size = 1000 # Number of symbols we want to generate\nnum_bits_per_symbol = 4 # 16-QAM has four bits per symbol\nbinary_source = sionna.utils.BinarySource()\nb = binary_source([batch_size, num_bits_per_symbol])\nb\n```\n\n```python\n<tf.Tensor: shape=(1000, 4), dtype=float32, numpy=\narray([[1., 0., 1., 0.],\n       [0., 1., 1., 1.],\n       [0., 1., 0., 0.],\n       ...,\n       [1., 0., 1., 0.],\n       [1., 1., 0., 0.],\n       [0., 1., 0., 1.]], dtype=float32)>\n```\n\n\nNext, let us create a [Constellation](https://nvlabs.github.io/sionna/api/mapping.html#sionna.mapping.Constellation) and visualize it:\n\n\n```python\nconstellation = sionna.mapping.Constellation(\"qam\", num_bits_per_symbol)\nconstellation.show();\n```\n\n\nWe now need a [Mapper](https://nvlabs.github.io/sionna/api/mapping.html#mapper) that maps each row of b to the constellation symbols according to the bit labeling shown above.\n\n\n```python\nmapper = sionna.mapping.Mapper(constellation=constellation)\nx = mapper(b)\nx[:10]\n```\n\n```python\n<tf.Tensor: shape=(10, 1), dtype=complex64, numpy=\narray([[-0.9486833+0.3162278j],\n       [ 0.9486833-0.9486833j],\n       [ 0.3162278-0.3162278j],\n       [-0.3162278-0.3162278j],\n       [ 0.9486833-0.3162278j],\n       [-0.3162278+0.3162278j],\n       [ 0.3162278-0.3162278j],\n       [-0.9486833-0.9486833j],\n       [ 0.9486833+0.3162278j],\n       [ 0.9486833+0.9486833j]], dtype=complex64)>\n```"
"Let us now make things a bit more interesting a send our symbols over and [AWGN channel](https://nvlabs.github.io/sionna/api/channel.html#sionna.channel.AWGN):\n\n\n```python\nawgn = sionna.channel.AWGN()\nebno_db = 15 # Desired Eb/No in dB\nno = sionna.utils.ebnodb2no(ebno_db, num_bits_per_symbol, coderate=1)\ny = awgn([x, no])\n# Visualize the received signal\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111)\nplt.scatter(np.real(y), np.imag(y));\nax.set_aspect(\"equal\", adjustable=\"box\")\nplt.xlabel(\"Real Part\")\nplt.ylabel(\"Imaginary Part\")\nplt.grid(True, which=\"both\", axis=\"both\")\nplt.title(\"Received Symbols\");\n```"
