"# 5G NR\n\nThis module provides layers and functions to support simulations of\n5G NR compliant features, in particular, the physical uplink shared channel (PUSCH). It provides implementations of a subset of the physical layer functionalities as described in the 3GPP specifications [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211), [[3GPP38212]](https://nvlabs.github.io/sionna/api/nr.html#gpp38212), and [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214).\n\nThe best way to discover this modules components is by having a look at the [5G NR PUSCH Tutorial](../examples/5G_NR_PUSCH.html).\n\nThe following code snippet shows how you can make standard-compliant\nsimulations of the 5G NR PUSCH with a few lines of code:\n```python\n# Create a PUSCH configuration with default settings\npusch_config = PUSCHConfig()\n# Instantiate a PUSCHTransmitter from the PUSCHConfig\npusch_transmitter = PUSCHTransmitter(pusch_config)\n# Create a PUSCHReceiver using the PUSCHTransmitter\npusch_receiver = PUSCHReceiver(pusch_transmitter)\n# AWGN channel\nchannel = AWGN()\n# Simulate transmissions over the AWGN channel\nbatch_size = 16\nno = 0.1 # Noise variance\nx, b = pusch_transmitter(batch_size) # Generate transmit signal and info bits\ny = channel([x, no]) # Simulate channel output\nb_hat = pusch_receiver([x, no]) # Recover the info bits\n# Compute BER\nprint(\"BER:\", compute_ber(b, b_hat).numpy())\n```\n\n\nThe [`PUSCHTransmitter`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHTransmitter) and [`PUSCHReceiver`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHReceiver) provide high-level abstractions of all required processing blocks. You can easily modify them according to your needs."
"### CarrierConfig\n\n`class` `sionna.nr.``CarrierConfig`(*`**``kwargs`*)[`[source]`](../_modules/sionna/nr/carrier_config.html#CarrierConfig)\n\nThe CarrierConfig objects sets parameters for a specific OFDM numerology,\nas described in Section 4 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nAll configurable properties can be provided as keyword arguments during the\ninitialization or changed later.\n xample\n```python\n>>> carrier_config = CarrierConfig(n_cell_id=41)\n>>> carrier_config.subcarrier_spacing = 30\n```\n`property` `cyclic_prefix`\n\nCyclic prefix length\n\nThe option normal corresponds to 14 OFDM symbols per slot, while\nextended corresponds to 12 OFDM symbols. The latter option is\nonly possible with a <cite>subcarrier_spacing</cite> of 60 kHz.\nType\n\nstr, normal (default) | extended\n\n\n`property` `cyclic_prefix_length`\n\nCyclic prefix length\n$N_{\\text{CP},l}^{\\mu} \\cdot T_{\\text{c}}$ [s]\nType\n\nfloat, read-only\n\n\n`property` `frame_duration`\n\nDuration of a frame\n$T_\\text{f}$ [s]\nType\n\nfloat, 10e-3 (default), read-only\n\n\n`property` `frame_number`\n\nSystem frame number $n_\\text{f}$\nType\n\nint, 0 (default), [0,,1023]\n\n\n`property` `kappa`\n\nThe constant\n$\\kappa = T_\\text{s}/T_\\text{c}$\nType\n\nfloat, 64, read-only\n\n\n`property` `mu`\n\nSubcarrier\nspacing configuration, $\\Delta f = 2^\\mu 15$ kHz\nType\n\nint, 0 (default) | 1 | 2 | 3 | 4 | 5 | 6, read-only\n\n\n`property` `n_cell_id`\n\nPhysical layer cell identity\n$N_\\text{ID}^\\text{cell}$\nType\n\nint, 1 (default) | [0,,1007]\n\n\n`property` `n_size_grid`\n\nNumber of resource blocks in the\ncarrier resource grid $N^{\\text{size},\\mu}_{\\text{grid},x}$\nType\n\nint, 4 (default) | [1,,275]\n\n\n`property` `n_start_grid`\n\nStart of resource grid relative to\ncommon resource block (CRB) 0\n$N^{\\text{start},\\mu}_{\\text{grid},x}$\nType\n\nint, 0 (default) | [0,,2199]\n\n\n`property` `num_slots_per_frame`\n\nNumber\nof slots per frame $N_\\text{slot}^{\\text{frame},\\mu}$\n\nDepends on the <cite>subcarrier_spacing</cite>.\nType\n\nint, 10 (default) | 20 | 40 | 80 | 160 | 320 | 640, read-only\n\n\n`property` `num_slots_per_subframe`\n\nNumber of\nslots per subframe $N_\\text{slot}^{\\text{subframe},\\mu}$\n\nDepends on the <cite>subcarrier_spacing</cite>.\nType\n\nint, 1 (default) | 2 | 4 | 8 | 16 | 32 | 64, read-only\n\n\n`property` `num_symbols_per_slot`\n\nNumber of OFDM symbols per slot\n$N_\\text{symb}^\\text{slot}$\n\nConfigured through the <cite>cyclic_prefix</cite>.\nType\n\nint, 14 (default) | 12, read-only\n\n\n`property` `slot_number`\n\nSlot number within a frame\n$n^\\mu_{s,f}$\nType\n\nint, 0 (default), [0,,num_slots_per_frame]\n\n\n`property` `sub_frame_duration`\n\nDuration of a subframe\n$T_\\text{sf}$ [s]\nType\n\nfloat, 1e-3 (default), read-only\n\n\n`property` `subcarrier_spacing`\n\nSubcarrier\nspacing $\\Delta f$ [kHz]\nType\n\nfloat, 15 (default) | 30 | 60 | 120 | 240 | 480 | 960\n\n\n`property` `t_c`\n\nSampling time $T_\\text{c}$ for\nsubcarrier spacing 480kHz.\nType\n\nfloat, 0.509e-9 [s], read-only\n\n\n`property` `t_s`\n\nSampling time $T_\\text{s}$ for\nsubcarrier spacing 15kHz.\nType\n\nfloat, 32.552e-9 [s], read-only"
"### LayerMapper\n\n`class` `sionna.nr.``LayerMapper`(*`num_layers``=``1`*, *`verbose``=``False`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/layer_mapping.html#LayerMapper)\n\nPerforms MIMO layer mapping of modulated symbols to layers as defined in\n[[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nThe LayerMapper supports PUSCH and PDSCH channels and follows the procedure\nas defined in Sec. 6.3.1.3 and Sec. 7.3.1.3 in [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211), respectively.\n\nAs specified in Tab. 7.3.1.3.-1 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211), the LayerMapper expects two\ninput streams for multiplexing if more than 4 layers are active (only\nrelevant for PDSCH).\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **num_layers** (*int**, **1** (**default**) **|** [**1**,**...**,**8**]*)  Number of MIMO layers. If\n`num_layers` >=4, a list of two inputs is expected.\n- **verbose** (*bool**, **False** (**default**)*)  If True, additional parameters are printed.\n\n\nInput\n\n**inputs** (*[,n], or [[,n1], [,n2]], tf.complex*)  2+D tensor containing the sequence of symbols to be mapped. If\n`num_layers` >=4, a list of two inputs is expected and <cite>n1</cite>/<cite>n2</cite>\nmust be chosen as defined in Tab. 7.3.1.3.-1 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nOutput\n\n*[,num_layers, n/num_layers], tf.complex*  2+D tensor containing the sequence of symbols mapped to the MIMO\nlayers.\n\n\n`property` `num_codewords`\n\nNumber of input codewords for layer mapping. Can be either 1 or 2.\n\n\n`property` `num_layers`\n\nNumber of MIMO layers\n\n\n`property` `num_layers0`\n\nNumber of layers for first codeword (only relevant for\n<cite>num_codewords</cite> =2)\n\n\n`property` `num_layers1`\n\nNumber of layers for second codeword (only relevant for\n<cite>num_codewords</cite> =2)"
"### LayerDemapper\n\n`class` `sionna.nr.``LayerDemapper`(*`layer_mapper`*, *`num_bits_per_symbol``=``1`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/layer_mapping.html#LayerDemapper)\n\nDemaps MIMO layers to coded transport block(s) by following Sec. 6.3.1.3\nand Sec. 7.3.1.3 in [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nThis layer must be associated to a [`LayerMapper`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.LayerMapper) and\nperforms the inverse operation.\n\nIt is assumed that `num_bits_per_symbol` consecutive LLRs belong to\na single symbol position. This allows to apply the LayerDemapper after\ndemapping symbols to LLR values.\n\nIf the layer mapper is configured for dual codeword transmission, a list of\nboth transport block streams is returned.\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **layer_mapper** ([`LayerMapper`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.LayerMapper))  Associated LayerMapper.\n- **num_bits_per_symbol** (*int**, **1** (**default**)*)  Modulation order. Defines how many consecutive LLRs are associated\nto the same symbol position.\n\n\nInput\n\n**inputs** (*[,num_layers, n/num_layers], tf.float*)  2+D tensor containing MIMO layer data sequences.\n\nOutput\n\n*[,n], or [[,n1], [,n2]], tf.float*  2+D tensor containing the sequence of bits after layer demapping.\nIf `num_codewords` =2, a list of two transport blocks is returned.\n\n\n**Note**\n\nAs it is more convenient to apply the layer demapper after demapping\nsymbols to LLRs, this layer groups the input sequence into groups of\n`num_bits_per_symbol` LLRs before restoring the original symbol sequence.\nThis behavior can be deactivated by setting `num_bits_per_symbol` =1."
"### PUSCHConfig\n\n`class` `sionna.nr.``PUSCHConfig`(*`carrier_config``=``None`*, *`pusch_dmrs_config``=``None`*, *`tb_config``=``None`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/pusch_config.html#PUSCHConfig)\n\nThe PUSCHConfig objects sets parameters for a physical uplink shared\nchannel (PUSCH), as described in Sections 6.3 and 6.4 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nAll configurable properties can be provided as keyword arguments during the\ninitialization or changed later.\nParameters\n\n- **carrier_config** ([`CarrierConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig) or <cite>None</cite>)  An instance of [`CarrierConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig). If <cite>None</cite>, a\n[`CarrierConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig) instance with default settings\nwill be created.\n- **pusch_dmrs_config** ([`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig) or <cite>None</cite>)  An instance of [`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig). If <cite>None</cite>, a\n[`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig) instance with default settings\nwill be created.\n\n\n xample\n```python\n>>> pusch_config = PUSCHConfig(mapping_type=\"B\")\n>>> pusch_config.dmrs.config_type = 2\n>>> pusch_config.carrier.subcarrier_spacing = 30\n```\n`c_init`(*`l`*)[`[source]`](../_modules/sionna/nr/pusch_config.html#PUSCHConfig.c_init)\n\nCompute RNG initialization $c_\\text{init}$ as in Section 6.4.1.1.1.1 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211)\nInput\n\n**l** (*int*)  OFDM symbol index relative to a reference $l$\n\nOutput\n\n**c_init** (*int*)  RNG initialization value\n\n\n`property` `carrier`\n\nCarrier configuration\nType\n\n[`CarrierConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig)\n\n\n`property` `dmrs`\n\nPUSCH DMRS configuration\nType\n\n[`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig)\n\n\n`property` `dmrs_grid`\n\nEmpty\nresource grid for each DMRS port, filled with DMRS signals\n\nThis property returns for each configured DMRS port an empty\nresource grid filled with DMRS signals as defined in\nSection 6.4.1.1 [3GPP38211]. Not all possible options are implemented,\ne.g., frequency hopping and transform precoding are not available.\n\nThis property provides the *unprecoded* DMRS for each configured DMRS port.\nPrecoding might be applied to map the DMRS to the antenna ports. However,\nin this case, the number of DMRS ports cannot be larger than the number of\nlayers.\nType\n\ncomplex, [num_dmrs_ports, num_subcarriers, num_symbols_per_slot], read-only\n\n\n`property` `dmrs_mask`\n\nMasked\nresource elements in the resource grid. <cite>True</cite> corresponds to\nresource elements on which no data is transmitted.\nType\n\nbool, [num_subcarriers, num_symbols_per_slot], read-only\n\n\n`property` `dmrs_symbol_indices`\n\nIndices of DMRS symbols within a slot\nType\n\nlist, int, read-only\n\n\n`property` `frequency_hopping`\n\nFrequency hopping configuration\nType\n\nstr, neither (default), read-only\n\n\n`property` `l_bar`\n\nList of possible values of\n$\\bar{l}$ used for DMRS generation\n\nDefined in Tables 6.4.1.1.3-3 and 6.4.1.1.3-4 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\nType\n\nlist, elements in [0,,11], read-only\n\n\n`property` `mapping_type`\n\nMapping type\nType\n\nstring, A (default) | B\n\n\n`property` `n_rnti`\n\nRadio network temporary identifier\n$n_\\text{RNTI}$\nType\n\nint, 1 (default), [0,,65535]\n\n\n`property` `n_size_bwp`\n\nNumber of resource blocks in the\nbandwidth part (BWP) $N^{\\text{size},\\mu}_{\\text{BWP},i}$\n\nIf set to <cite>None</cite>, the property\n[`n_size_grid`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig.n_size_grid) of\n<cite>carrier</cite> will be used.\nType\n\nint, None (default), [1,,275]\n\n\n`property` `n_start_bwp`\n\nStart of BWP relative to\ncommon resource block (CRB) 0\n$N^{\\text{start},\\mu}_{\\text{BWP},i}$\nType\n\nint, 0 (default) | [0,,2199]\n\n\n`property` `num_antenna_ports`\n\nNumber of antenna ports\n\nMust be larger than or equal to\n[`num_layers`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig.num_layers).\nType\n\nint, 1 (default) | 2 | 4\n\n\n`property` `num_coded_bits`\n\nNumber of coded bits that fit into one PUSCH slot.\nType\n\nint, read-only\n\n\n`property` `num_layers`\n\nNumber of transmission layers\n$\\nu$\n\nMust be smaller than or equal to\n[`num_antenna_ports`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig.num_antenna_ports).\nType\n\nint, 1 (default) | 2 | 3 | 4\n\n\n`property` `num_ov`\n\nNumber of unused resource elements due to additional overhead as specified by higher layer.\nType\n\nint, 0 (default), read-only\n\n\n`property` `num_res_per_prb`\n\nNumber of resource elements per PRB\navailable for data\nType\n\nint, read-only\n\n\n`property` `num_resource_blocks`\n\nNumber of allocated resource blocks for the\nPUSCH transmissions.\nType\n\nint, read-only\n\n\n`property` `num_subcarriers`\n\nNumber of allocated subcarriers for the\nPUSCH transmissions\nType\n\nint, read-only\n\n\n`property` `precoding`\n\nPUSCH\ntransmission scheme\nType\n\nstr, non-codebook (default), codebook\n\n\n`property` `precoding_matrix`\n\nPrecoding matrix\n$\\mathbf{W}$ as defined in\nTables 6.3.1.5-1 to 6.3.1.5-7 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nOnly relevant if `precoding`\nis codebook.\nType\n\nnd_array, complex, [num_antenna_ports, numLayers]\n\n\n`show`()[`[source]`](../_modules/sionna/nr/pusch_config.html#PUSCHConfig.show)\n\nPrint all properties of the PUSCHConfig and children\n\n\n`property` `symbol_allocation`\n\nPUSCH symbol allocation\n\nThe first elements denotes the start of the symbol allocation.\nThe second denotes the positive number of allocated OFDM symbols.\nFor <cite>mapping_type</cite> A, the first element must be zero.\nFor <cite>mapping_type</cite> B, the first element must be in\n[0,,13]. The second element must be such that the index\nof the last allocated OFDM symbol is not larger than 13\n(for normal cyclic prefix) or 11 (for extended cyclic prefix).\nType\n\n2-tuple, int, [0, 14] (default)\n\n\n`property` `tb`\n\nTransport block configuration\nType\n\n[`TBConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.TBConfig)\n\n\n`property` `tb_size`\n\nTransport block size, i.e., how many information bits can be encoded into a slot for the given slot configuration.\nType\n\nint, read-only\n\n\n`property` `tpmi`\n\nTransmit precoding matrix indicator\n\nThe allowed value depends on the number of layers and\nthe number of antenna ports according to Table 6.3.1.5-1\nuntil Table 6.3.1.5-7 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\nType\n\nint,  0 (default) | [0,,27]\n\n\n`property` `transform_precoding`\n\nUse transform precoding\nType\n\nbool, False (default)"
"### PUSCHDMRSConfig\n\n`class` `sionna.nr.``PUSCHDMRSConfig`(*`**``kwargs`*)[`[source]`](../_modules/sionna/nr/pusch_dmrs_config.html#PUSCHDMRSConfig)\n\nThe PUSCHDMRSConfig objects sets parameters related to the generation\nof demodulation reference signals (DMRS) for a physical uplink shared\nchannel (PUSCH), as described in Section 6.4.1.1 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nAll configurable properties can be provided as keyword arguments during the\ninitialization or changed later.\n xample\n```python\n>>> dmrs_config = PUSCHDMRSConfig(config_type=2)\n>>> dmrs_config.additional_position = 1\n```\n`property` `additional_position`\n\nMaximum number of additional DMRS positions\n\nThe actual number of used DMRS positions depends on\nthe length of the PUSCH symbol allocation.\nType\n\nint, 0 (default) | 1 | 2 | 3\n\n\n`property` `allowed_dmrs_ports`\n\nList of nominal antenna\nports\n\nThe maximum number of allowed antenna ports <cite>max_num_dmrs_ports</cite>\ndepends on the DMRS <cite>config_type</cite> and <cite>length</cite>. It can be\nequal to 4, 6, 8, or 12.\nType\n\nlist, [0,,max_num_dmrs_ports-1], read-only\n\n\n`property` `beta`\n\nRatio of PUSCH energy per resource element\n(EPRE) to DMRS EPRE $\\beta^{\\text{DMRS}}_\\text{PUSCH}$\nTable 6.2.2-1 [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214)\nType\n\nfloat, read-only\n\n\n`property` `cdm_groups`\n\nList of CDM groups\n$\\lambda$ for all ports\nin the <cite>dmrs_port_set</cite> as defined in\nTable 6.4.1.1.3-1 or 6.4.1.1.3-2 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211)\n\nDepends on the <cite>config_type</cite>.\nType\n\nlist, elements in [0,1,2], read-only\n\n\n`property` `config_type`\n\nDMRS configuration type\n\nThe configuration type determines the frequency density of\nDMRS signals. With configuration type 1, six subcarriers per PRB are\nused for each antenna port, with configuration type 2, four\nsubcarriers are used.\nType\n\nint, 1 (default) | 2\n\n\n`property` `deltas`\n\nList of delta (frequency)\nshifts $\\Delta$ for all ports in the <cite>port_set</cite> as defined in\nTable 6.4.1.1.3-1 or 6.4.1.1.3-2 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211)\n\nDepends on the <cite>config_type</cite>.\nType\n\nlist, elements in [0,1,2,4], read-only\n\n\n`property` `dmrs_port_set`\n\nList of used DMRS antenna ports\n\nThe elements in this list must all be from the list of\n<cite>allowed_dmrs_ports</cite> which depends on the <cite>config_type</cite> as well as\nthe <cite>length</cite>. If set to <cite>[]</cite>, the port set will be equal to\n[0,,num_layers-1], where\n[`num_layers`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig.num_layers) is a property of the\nparent [`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig) instance.\nType\n\nlist, [] (default) | [0,,11]\n\n\n`property` `length`\n\nNumber of front-loaded DMRS symbols\nA value of 1 corresponds to single-symbol DMRS, a value\nof 2 corresponds to double-symbol DMRS.\nType\n\nint, 1 (default) | 2\n\n\n`property` `n_id`\n\nScrambling\nidentities\n\nDefines the scrambling identities $N_\\text{ID}^0$ and\n$N_\\text{ID}^1$ as a 2-tuple of integers. If <cite>None</cite>,\nthe property [`n_cell_id`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig.n_cell_id) of the\n[`CarrierConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.CarrierConfig) is used.\nType\n\n2-tuple, None (default), [[0,,65535], [0,,65535]]\n\n\n`property` `n_scid`\n\nDMRS scrambling initialization\n$n_\\text{SCID}$\nType\n\nint, 0 (default) | 1\n\n\n`property` `num_cdm_groups_without_data`\n\nNumber of CDM groups without data\n\nThis parameter controls how many REs are available for data\ntransmission in a DMRS symbol. It should be greater or equal to\nthe maximum configured number of CDM groups. A value of\n1 corresponds to CDM group 0, a value of 2 corresponds to\nCDM groups 0 and 1, and a value of 3 corresponds to\nCDM groups 0, 1, and 2.\nType\n\nint, 2 (default) | 1 | 3\n\n\n`property` `type_a_position`\n\nPosition of first DMRS OFDM symbol\n\nDefines the position of the first DMRS symbol within a slot.\nThis parameter only applies if the property\n[`mapping_type`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig.mapping_type) of\n[`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig) is equal to A.\nType\n\nint, 2 (default) | 3\n\n\n`property` `w_f`\n\nFrequency weight vectors\n$w_f(k')$ for all ports in the port set as defined in\nTable 6.4.1.1.3-1 or 6.4.1.1.3-2 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211)\nType\n\nmatrix, elements in [-1,1], read-only\n\n\n`property` `w_t`\n\nTime weight vectors\n$w_t(l')$ for all ports in the port set as defined in\nTable 6.4.1.1.3-1 or 6.4.1.1.3-2 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211)\nType\n\nmatrix, elements in [-1,1], read-only"
"### PUSCHLSChannelEstimator\n\n`class` `sionna.nr.``PUSCHLSChannelEstimator`(*`resource_grid`*, *`dmrs_length`*, *`dmrs_additional_position`*, *`num_cdm_groups_without_data`*, *`interpolation_type``=``'nn'`*, *`interpolator``=``None`*, *`dtype``=``tf.complex64`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/pusch_channel_estimation.html#PUSCHLSChannelEstimator)\n\nLayer implementing least-squares (LS) channel estimation for NR PUSCH Transmissions.\n\nAfter LS channel estimation at the pilot positions, the channel estimates\nand error variances are interpolated accross the entire resource grid using\na specified interpolation function.\n\nThe implementation is similar to that of [`LSChannelEstimator`](ofdm.html#sionna.ofdm.LSChannelEstimator).\nHowever, it additional takes into account the separation of streams in the same CDM group\nas defined in [`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig). This is done through\nfrequency and time averaging of adjacent LS channel estimates.\nParameters\n\n- **resource_grid** ()  An instance of [`ResourceGrid`](ofdm.html#sionna.ofdm.ResourceGrid)\n- **dmrs_length** (*int**, **[**1**,**2**]*)  Length of DMRS symbols. See [`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig).\n- **dmrs_additional_position** (*int**, **[**0**,**1**,**2**,**3**]*)  Number of additional DMRS symbols.\nSee [`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig).\n- **num_cdm_groups_without_data** (*int**, **[**1**,**2**,**3**]*)  Number of CDM groups masked for data transmissions.\nSee [`PUSCHDMRSConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHDMRSConfig).\n- **interpolation_type** (*One of** [**\"nn\"**, **\"lin\"**, **\"lin_time_avg\"**]**, **string*)  The interpolation method to be used.\nIt is ignored if `interpolator` is not <cite>None</cite>.\nAvailable options are [`NearestNeighborInterpolator`](ofdm.html#sionna.ofdm.NearestNeighborInterpolator) (<cite>nn</cite>)\nor [`LinearInterpolator`](ofdm.html#sionna.ofdm.LinearInterpolator) without (<cite>lin</cite>) or with\naveraging across OFDM symbols (<cite>lin_time_avg</cite>).\nDefaults to nn.\n- **interpolator** ()  An instance of [`BaseChannelInterpolator`](ofdm.html#sionna.ofdm.BaseChannelInterpolator),\nsuch as [`LMMSEInterpolator`](ofdm.html#sionna.ofdm.LMMSEInterpolator),\nor <cite>None</cite>. In the latter case, the interpolator specified\nby `interpolation_type` is used.\nOtherwise, the `interpolator` is used and `interpolation_type`\nis ignored.\nDefaults to <cite>None</cite>.\n- **dtype** (*tf.Dtype*)  Datatype for internal calculations and the output dtype.\nDefaults to <cite>tf.complex64</cite>.\n\n\nInput\n\n- **(y, no)**  Tuple:\n- **y** (*[batch_size, num_rx, num_rx_ant, num_ofdm_symbols,fft_size], tf.complex*)  Observed resource grid\n- **no** (*[batch_size, num_rx, num_rx_ant] or only the first n>=0 dims, tf.float*)  Variance of the AWGN\n\n\nOutput\n\n- **h_ls** (*[batch_size, num_rx, num_rx_ant, num_tx, num_streams_per_tx, num_ofdm_symbols,fft_size], tf.complex*)  Channel estimates across the entire resource grid for all\ntransmitters and streams\n- **err_var** (Same shape as `h_ls`, tf.float)  Channel estimation error variance across the entire resource grid\nfor all transmitters and streams"
"### PUSCHPilotPattern\n\n`class` `sionna.nr.``PUSCHPilotPattern`(*`pusch_configs`*, *`dtype``=``tf.complex64`*)[`[source]`](../_modules/sionna/nr/pusch_pilot_pattern.html#PUSCHPilotPattern)\n\nClass defining a pilot pattern for NR PUSCH.\n\nThis class defines a [`PilotPattern`](ofdm.html#sionna.ofdm.PilotPattern)\nthat is used to configure an OFDM [`ResourceGrid`](ofdm.html#sionna.ofdm.ResourceGrid).\n\nFor every transmitter, a separte [`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig)\nneeds to be provided from which the pilot pattern will be created.\nParameters\n\n- **pusch_configs** (instance or list of [`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig))  PUSCH Configurations according to which the pilot pattern\nwill created. One configuration is needed for each transmitter.\n- **dtype** (*tf.Dtype*)  Defines the datatype for internal calculations and the output\ndtype. Defaults to <cite>tf.complex64</cite>.\n\n\n`property` `mask`\n\nMask of the pilot pattern\n\n\n`property` `normalize`\n\nReturns or sets the flag indicating if the pilots\nare normalized or not\n\n\n`property` `num_data_symbols`\n\nNumber of data symbols per transmit stream.\n\n\n`property` `num_effective_subcarriers`\n\nNumber of effectvie subcarriers\n\n\n`property` `num_ofdm_symbols`\n\nNumber of OFDM symbols\n\n\n`property` `num_pilot_symbols`\n\nNumber of pilot symbols per transmit stream.\n\n\n`property` `num_streams_per_tx`\n\nNumber of streams per transmitter\n\n\n`property` `num_tx`\n\nNumber of transmitters\n\n\n`property` `pilots`\n\nReturns or sets the possibly normalized tensor of pilot symbols.\nIf pilots are normalized, the normalization will be applied\nafter new values for pilots have been set. If this is\nnot the desired behavior, turn normalization off.\n\n\n`show`(*`tx_ind``=``None`*, *`stream_ind``=``None`*, *`show_pilot_ind``=``False`*)\n\nVisualizes the pilot patterns for some transmitters and streams.\nInput\n\n- **tx_ind** (*list, int*)  Indicates the indices of transmitters to be included.\nDefaults to <cite>None</cite>, i.e., all transmitters included.\n- **stream_ind** (*list, int*)  Indicates the indices of streams to be included.\nDefaults to <cite>None</cite>, i.e., all streams included.\n- **show_pilot_ind** (*bool*)  Indicates if the indices of the pilot symbols should be shown.\n\n\nOutput\n\n**list** (*matplotlib.figure.Figure*)  List of matplot figure objects showing each the pilot pattern\nfrom a specific transmitter and stream.\n\n\n`property` `trainable`\n\nReturns if pilots are trainable or not"
"### PUSCHPrecoder\n\n`class` `sionna.nr.``PUSCHPrecoder`(*`precoding_matrices`*, *`dtype``=``tf.complex64`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/pusch_precoder.html#PUSCHPrecoder)\n\nPrecodes a batch of modulated symbols mapped onto a resource grid\nfor PUSCH transmissions. Each transmitter is assumed to have its\nown precoding matrix.\nParameters\n\n- **precoding_matrices** (*list**, **[**num_tx**, **num_antenna_ports**, **num_layers**]** tf.complex*)  List of precoding matrices, one for each transmitter.\nAll precoding matrices must have the same shape.\n- **dtype** (*One of** [**tf.complex64**, **tf.complex128**]*)  Dtype of inputs and outputs. Defaults to tf.complex64.\n\n\nInput\n\n*[batch_size, num_tx, num_layers, num_symbols_per_slot, num_subcarriers]*  Batch of resource grids to be precoded\n\nOutput\n\n*[batch_size, num_tx, num_antenna_ports, num_symbols_per_slot, num_subcarriers]*  Batch of precoded resource grids"
"### PUSCHReceiver\n\n`class` `sionna.nr.``PUSCHReceiver`(*`pusch_transmitter`*, *`channel_estimator``=``None`*, *`mimo_detector``=``None`*, *`tb_decoder``=``None`*, *`return_tb_crc_status``=``False`*, *`stream_management``=``None`*, *`input_domain``=``'freq'`*, *`l_min``=``None`*, *`dtype``=``tf.complex64`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/pusch_receiver.html#PUSCHReceiver)\n\nThis layer implements a full receiver for batches of 5G NR PUSCH slots sent\nby multiple transmitters. Inputs can be in the time or frequency domain.\nPerfect channel state information can be optionally provided.\nDifferent channel estimatiors, MIMO detectors, and transport decoders\ncan be configured.\n\nThe layer combines multiple processing blocks into a single layer\nas shown in the following figure. Blocks with dashed lines are\noptional and depend on the configuration.\n\n\nIf the `input_domain` equals time, the inputs $\\mathbf{y}$ are first\ntransformed to resource grids with the [`OFDMDemodulator`](ofdm.html#sionna.ofdm.OFDMDemodulator).\nThen channel estimation is performed, e.g., with the help of the\n[`PUSCHLSChannelEstimator`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHLSChannelEstimator). If `channel_estimator`\nis chosen to be perfect, this step is skipped and the input $\\mathbf{h}$\nis used instead.\nNext, MIMO detection is carried out with an arbitrary [`OFDMDetector`](ofdm.html#sionna.ofdm.OFDMDetector).\nThe resulting LLRs for each layer are then combined to transport blocks\nwith the help of the [`LayerDemapper`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.LayerDemapper).\nFinally, the transport blocks are decoded with the [`TBDecoder`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.TBDecoder).\nParameters\n\n- **pusch_transmitter** ([`PUSCHTransmitter`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHTransmitter))  Transmitter used for the generation of the transmit signals\n- **channel_estimator** ([`BaseChannelEstimator`](ofdm.html#sionna.ofdm.BaseChannelEstimator), perfect, or <cite>None</cite>)  Channel estimator to be used.\nIf <cite>None</cite>, the [`PUSCHLSChannelEstimator`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHLSChannelEstimator) with\nlinear interpolation is used.\nIf perfect, no channel estimation is performed and the channel state information\n`h` must be provided as additional input.\nDefaults to <cite>None</cite>.\n- **mimo_detector** ([`OFDMDetector`](ofdm.html#sionna.ofdm.OFDMDetector) or <cite>None</cite>)  MIMO Detector to be used.\nIf <cite>None</cite>, the [`LinearDetector`](ofdm.html#sionna.ofdm.LinearDetector) with\nLMMSE detection is used.\nDefaults to <cite>None</cite>.\n- **tb_decoder** ([`TBDecoder`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.TBDecoder) or <cite>None</cite>)  Transport block decoder to be used.\nIf <cite>None</cite>, the [`TBDecoder`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.TBDecoder) with its\ndefault settings is used.\nDefaults to <cite>None</cite>.\n- **return_tb_crc_status** (*bool*)  If <cite>True</cite>, the status of the transport block CRC is returned\nas additional output.\nDefaults to <cite>False</cite>.\n- **stream_management** ([`StreamManagement`](mimo.html#sionna.mimo.StreamManagement) or <cite>None</cite>)  Stream management configuration to be used.\nIf <cite>None</cite>, it is assumed that there is a single receiver\nwhich decodes all streams of all transmitters.\nDefaults to <cite>None</cite>.\n- **input_domain** (*str**, **one of** [**\"freq\"**, **\"time\"**]*)  Domain of the input signal.\nDefaults to freq.\n- **l_min** (int or <cite>None</cite>)  Smallest time-lag for the discrete complex baseband channel.\nOnly needed if `input_domain` equals time.\nDefaults to <cite>None</cite>.\n- **dtype** (*tf.Dtype*)  Datatype for internal calculations and the output dtype.\nDefaults to <cite>tf.complex64</cite>.\n\n\nInput\n\n- **(y, h, no)**  Tuple:\n- **y** (*[batch size, num_rx, num_rx_ant, num_ofdm_symbols, fft_size], tf.complex or [batch size, num_rx, num_rx_ant, num_time_samples + l_max - l_min], tf.complex*)  Frequency- or time-domain input signal\n- **h** (*[batch size, num_rx, num_rx_ant, num_tx, num_tx_ant, num_ofdm_symbols, num_subcarriers], tf.complex or [batch size, num_rx, num_rx_ant, num_tx, num_tx_ant, num_time_samples + l_max - l_min, l_max - l_min + 1], tf.complex*)  Perfect channel state information in either frequency or time domain\n(depending on `input_domain`) to be used for detection.\nOnly required if `channel_estimator` equals perfect.\n- **no** (*[batch_size, num_rx, num_rx_ant] or only the first n>=0 dims, tf.float*)  Variance of the AWGN\n\n\nOutput\n\n- **b_hat** (*[batch_size, num_tx, tb_size], tf.float*)  Decoded information bits\n- **tb_crc_status** (*[batch_size, num_tx], tf.bool*)  Transport block CRC status\n\n\n xample"
"```python\n>>> pusch_config = PUSCHConfig()\n>>> pusch_transmitter = PUSCHTransmitter(pusch_config)\n>>> pusch_receiver = PUSCHReceiver(pusch_transmitter)\n>>> channel = AWGN()\n>>> x, b = pusch_transmitter(16)\n>>> no = 0.1\n>>> y = channel([x, no])\n>>> b_hat = pusch_receiver([x, no])\n>>> compute_ber(b, b_hat)\n<tf.Tensor: shape=(), dtype=float64, numpy=0.0>\n```\n`property` `resource_grid`\n\nOFDM resource grid underlying the PUSCH transmissions"
"### PUSCHTransmitter\n\n`class` `sionna.nr.``PUSCHTransmitter`(*`pusch_configs`*, *`return_bits``=``True`*, *`output_domain``=``'freq'`*, *`dtype``=``tf.complex64`*, *`verbose``=``False`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/pusch_transmitter.html#PUSCHTransmitter)\n\nThis layer generates batches of 5G NR PUSCH slots for multiple transmitters\nwith random or provided payloads. Frequency- or time-domain outputs can be generated.\n\nIt combines multiple processing blocks into a single layer\nas shown in the following figure. Blocks with dashed lines are\noptional and depend on the configuration.\n\n\nInformation bits $\\mathbf{b}$ that are either randomly generated or\nprovided as input are encoded into a transport block by the [`TBEncoder`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.TBEncoder).\nThe encoded bits are then mapped to QAM constellation symbols by the [`Mapper`](mapping.html#sionna.mapping.Mapper).\nThe [`LayerMapper`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.LayerMapper) splits the modulated symbols into different layers\nwhich are then mapped onto OFDM resource grids by the [`ResourceGridMapper`](ofdm.html#sionna.ofdm.ResourceGridMapper).\nIf precoding is enabled in the [`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig), the resource grids\nare further precoded so that there is one for each transmitter and antenna port.\nIf `output_domain` equals freq, these are the outputs $\\mathbf{x}$.\nIf `output_domain` is chosen to be time, the resource grids are transformed into\ntime-domain signals by the [`OFDMModulator`](ofdm.html#sionna.ofdm.OFDMModulator).\nParameters\n\n- **pusch_configs** (instance or list of [`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig))  PUSCH Configurations according to which the resource grid and pilot pattern\nwill created. One configuration is needed for each transmitter.\n- **return_bits** (*bool*)  If set to <cite>True</cite>, the layer generates random information bits\nto be transmitted and returns them together with the transmit signal.\nDefaults to <cite>True</cite>.\n- **output_domain** (*str**, **one of** [**\"freq\"**, **\"time\"**]*)  The domain of the output. Defaults to freq.\n- **dtype** (*One of** [**tf.complex64**, **tf.complex128**]*)  Dtype of inputs and outputs. Defaults to tf.complex64.\n- **verbose** (*bool*)  If <cite>True</cite>, additional parameters are printed during initialization.\nDefaults to <cite>False</cite>.\n\n\nInput\n\n- **One of**\n- **batch_size** (*int*)  Batch size of random transmit signals to be generated,\nif `return_bits` is <cite>True</cite>.\n- **b** (*[batch_size, num_tx, tb_size], tf.float*)  Information bits to be transmitted,\nif `return_bits` is <cite>False</cite>.\n\n\nOutput\n\n- **x** (*[batch size, num_tx, num_tx_ant, num_ofdm_symbols, fft_size], tf.complex or [batch size, num_tx, num_tx_ant, num_time_samples], tf.complex*)  Transmit signal in either frequency or time domain, depending on `output_domain`.\n- **b** (*[batch_size, num_tx, tb_size], tf.float*)  Transmitted information bits.\nOnly returned if `return_bits` is <cite>True</cite>.\n\n\n xample"
"```python\n>>> pusch_config = PUSCHConfig()\n>>> pusch_transmitter = PUSCHTransmitter(pusch_config)\n>>> x, b = pusch_transmitter(16)\n>>> print(\"Shape of x:\", x.shape)\nShape of x: (16, 1, 1, 14, 48)\n>>> print(\"Shape of b:\", b.shape)\nShape of b: (16, 1, 1352)\n```\n`property` `pilot_pattern`\n\nAggregate pilot pattern of all transmitters\n\n\n`property` `resource_grid`\n\nOFDM resource grid underlying the PUSCH transmissions\n\n\n`show`()[`[source]`](../_modules/sionna/nr/pusch_transmitter.html#PUSCHTransmitter.show)\n\nPrint all properties of the PUSCHConfig and children"
"### TBConfig\n\n`class` `sionna.nr.``TBConfig`(*`**``kwargs`*)[`[source]`](../_modules/sionna/nr/tb_config.html#TBConfig)\n\nThe TBConfig objects sets parameters related to the transport block\nencoding, as described in TS 38.214 [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214).\n\nAll configurable properties can be provided as keyword arguments during the\ninitialization or changed later.\n\nThe TBConfig is configured by selecting the modulation and coding scheme\n(MCS) tables and index.\n xample\n```python\n>>> tb_config = TBConfig(mcs_index=13)\n>>> tb_config.mcs_table = 3\n>>> tb_config.channel_type = \"PUSCH\"\n>>> tb_config.show()\n```\n\n\nThe following tables provide an overview of the corresponding coderates and\nmodulation orders.\n<table class=\"docutils align-center\" id=\"id46\">\n<caption>Table 1 MCS Index Table 1 (Table 5.1.3.1-1 in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214))</caption>\n<colgroup>\n<col style=\"width: 22%\" />\n<col style=\"width: 23%\" />\n<col style=\"width: 29%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\">\nMCS Index\n$I_{MCS}$\n</th>\n<th class=\"head\">\nModulation Order\n$Q_m$\n</th>\n<th class=\"head\">\nTarget Coderate\n$R\\times[1024]$\n</th>\n<th class=\"head\">\nSpectral Efficiency\n\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td>\n0</td>\n<td>\n2</td>\n<td>\n120</td>\n<td>\n0.2344</td>\n</tr>\n<tr class=\"row-odd\"><td>\n1</td>\n<td>\n2</td>\n<td>\n157</td>\n<td>\n0.3066</td>\n</tr>\n<tr class=\"row-even\"><td>\n2</td>\n<td>\n2</td>\n<td>\n193</td>\n<td>\n0.3770</td>\n</tr>\n<tr class=\"row-odd\"><td>\n3</td>\n<td>\n2</td>\n<td>\n251</td>\n<td>\n0.4902</td>\n</tr>\n<tr class=\"row-even\"><td>\n4</td>\n<td>\n2</td>\n<td>\n308</td>\n<td>\n0.6016</td>\n</tr>\n<tr class=\"row-odd\"><td>\n5</td>\n<td>\n2</td>\n<td>\n379</td>\n<td>\n0.7402</td>\n</tr>\n<tr class=\"row-even\"><td>\n6</td>\n<td>\n2</td>\n<td>\n449</td>\n<td>\n0.8770</td>\n</tr>\n<tr class=\"row-odd\"><td>\n7</td>\n<td>\n2</td>\n<td>\n526</td>\n<td>\n1.0273</td>\n</tr>\n<tr class=\"row-even\"><td>\n8</td>\n<td>\n2</td>\n<td>\n602</td>\n<td>\n1.1758</td>\n</tr>\n<tr class=\"row-odd\"><td>\n9</td>\n<td>\n2</td>\n<td>\n679</td>\n<td>\n1.3262</td>\n</tr>\n<tr class=\"row-even\"><td>\n10</td>\n<td>\n4</td>\n<td>\n340</td>\n<td>\n1.3281</td>\n</tr>\n<tr class=\"row-odd\"><td>\n11</td>\n<td>\n4</td>\n<td>\n378</td>\n<td>\n1.4766</td>\n</tr>\n<tr class=\"row-even\"><td>\n12</td>\n<td>\n4</td>\n<td>\n434</td>\n<td>\n1.6953</td>\n</tr>\n<tr class=\"row-odd\"><td>\n13</td>\n<td>\n4</td>\n<td>\n490</td>\n<td>\n1.9141</td>\n</tr>\n<tr class=\"row-even\"><td>\n14</td>\n<td>\n4</td>\n<td>\n553</td>\n<td>\n2.1602</td>\n</tr>\n<tr class=\"row-odd\"><td>\n15</td>\n<td>\n4</td>\n<td>\n616</td>\n<td>\n2.4063</td>\n</tr>\n<tr class=\"row-even\"><td>\n16</td>\n<td>\n4</td>\n<td>\n658</td>\n<td>\n2.5703</td>\n</tr>\n<tr class=\"row-odd\"><td>\n17</td>\n<td>\n6</td>\n<td>\n438</td>\n<td>\n2.5664</td>\n</tr>\n<tr class=\"row-even\"><td>\n18</td>\n<td>\n6</td>\n<td>\n466</td>\n<td>\n2.7305</td>\n</tr>\n<tr class=\"row-odd\"><td>\n19</td>\n<td>\n6</td>\n<td>\n517</td>\n<td>\n3.0293</td>\n</tr>\n<tr class=\"row-even\"><td>\n20</td>\n<td>\n6</td>\n<td>\n567</td>\n<td>\n3.3223</td>\n</tr>\n<tr class=\"row-odd\"><td>\n21</td>\n<td>\n6</td>\n<td>\n616</td>\n<td>\n3.6094</td>\n</tr>\n<tr class=\"row-even\"><td>\n22</td>\n<td>\n6</td>\n<td>\n666</td>\n<td>\n3.9023</td>\n</tr>\n<tr class=\"row-odd\"><td>\n23</td>\n<td>\n6</td>\n<td>\n719</td>\n<td>\n4.2129</td>\n</tr>\n<tr class=\"row-even\"><td>\n24</td>\n<td>\n6</td>\n<td>\n772</td>\n<td>\n4.5234</td>\n</tr>\n<tr class=\"row-odd\"><td>\n25</td>\n<td>\n6</td>\n<td>\n822</td>\n<td>\n4.8164</td>\n</tr>\n<tr class=\"row-even\"><td>\n26</td>\n<td>\n6</td>\n<td>\n873</td>\n<td>\n5.1152</td>\n</tr>\n<tr class=\"row-odd\"><td>\n27</td>\n<td>\n6</td>\n<td>\n910</td>\n<td>\n5.3320</td>\n</tr>\n<tr class=\"row-even\"><td>\n28</td>\n<td>\n6</td>\n<td>\n948</td>\n<td>\n5.5547</td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-center\" id=\"id47\">\n<caption>Table 2 MCS Index Table 2 (Table 5.1.3.1-2 in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214))</caption>\n<colgroup>\n<col style=\"width: 22%\" />\n<col style=\"width: 23%\" />\n<col style=\"width: 29%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\">\nMCS Index\n$I_{MCS}$\n</th>\n<th class=\"head\">\nModulation Order\n$Q_m$\n</th>\n<th class=\"head\">\nTarget Coderate\n$R\\times[1024]$\n</th>\n<th class=\"head\">\nSpectral Efficiency\n\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td>\n0</td>\n<td>\n2</td>\n<td>\n120</td>\n<td>\n0.2344</td>\n</tr>\n<tr class=\"row-odd\"><td>\n1</td>\n<td>\n2</td>\n<td>\n193</td>\n<td>\n0.3770</td>\n</tr>\n<tr class=\"row-even\"><td>\n2</td>\n<td>\n2</td>\n<td>\n308</td>\n<td>\n0.6016</td>\n</tr>\n<tr class=\"row-odd\"><td>\n3</td>\n<td>\n2</td>\n<td>\n449</td>\n<td>\n0.8770</td>\n</tr>\n<tr class=\"row-even\"><td>\n4</td>\n<td>\n2</td>\n<td>\n602</td>\n<td>\n1.1758</td>\n</tr>\n<tr class=\"row-odd\"><td>\n5</td>\n<td>\n4</td>\n<td>\n378</td>\n<td>\n1.4766</td>\n</tr>\n<tr class=\"row-even\"><td>\n6</td>\n<td>\n4</td>\n<td>\n434</td>\n<td>\n1.6953</td>\n</tr>\n<tr class=\"row-odd\"><td>\n7</td>\n<td>\n4</td>\n<td>\n490</td>\n<td>\n1.9141</td>\n</tr>\n<tr class=\"row-even\"><td>\n8</td>\n<td>\n4</td>\n<td>\n553</td>\n<td>\n2.1602</td>\n</tr>\n<tr class=\"row-odd\"><td>\n9</td>\n<td>\n4</td>\n<td>\n616</td>\n<td>\n2.4063</td>\n</tr>\n<tr class=\"row-even\"><td>\n10</td>\n<td>\n4</td>\n<td>\n658</td>\n<td>\n2.5703</td>\n</tr>\n<tr class=\"row-odd\"><td>\n11</td>\n<td>\n6</td>\n<td>\n466</td>\n<td>\n2.7305</td>\n</tr>\n<tr class=\"row-even\"><td>\n12</td>\n<td>\n6</td>\n<td>\n517</td>\n<td>\n3.0293</td>\n</tr>\n<tr class=\"row-odd\"><td>\n13</td>\n<td>\n6</td>\n<td>\n567</td>\n<td>\n3.3223</td>\n</tr>\n<tr class=\"row-even\"><td>\n14</td>\n<td>\n6</td>\n<td>\n616</td>\n<td>\n3.6094</td>\n</tr>\n<tr class=\"row-odd\"><td>\n15</td>\n<td>\n6</td>\n<td>\n666</td>\n<td>\n3.9023</td>\n</tr>\n<tr class=\"row-even\"><td>\n16</td>\n<td>\n6</td>\n<td>\n719</td>\n<td>\n4.2129</td>\n</tr>\n<tr class=\"row-odd\"><td>\n17</td>\n<td>\n6</td>\n<td>\n772</td>\n<td>\n4.5234</td>\n</tr>\n<tr class=\"row-even\"><td>\n18</td>\n<td>\n6</td>\n<td>\n822</td>\n<td>\n4.8164</td>\n</tr>\n<tr class=\"row-odd\"><td>\n19</td>\n<td>\n6</td>\n<td>\n873</td>\n<td>\n5.1152</td>\n</tr>\n<tr class=\"row-even\"><td>\n20</td>\n<td>\n8</td>\n<td>\n682.5</td>\n<td>\n5.3320</td>\n</tr>\n<tr class=\"row-odd\"><td>\n21</td>\n<td>\n8</td>\n<td>\n711</td>\n<td>\n5.5547</td>\n</tr>\n<tr class=\"row-even\"><td>\n22</td>\n<td>\n8</td>\n<td>\n754</td>\n<td>\n5.8906</td>\n</tr>\n<tr class=\"row-odd\"><td>\n23</td>\n<td>\n8</td>\n<td>\n797</td>\n<td>\n6.2266</td>\n</tr>\n<tr class=\"row-even\"><td>\n24</td>\n<td>\n8</td>\n<td>\n841</td>\n<td>\n6.5703</td>\n</tr>\n<tr class=\"row-odd\"><td>\n25</td>\n<td>\n8</td>\n<td>\n885</td>\n<td>\n6.9141</td>\n</tr>\n<tr class=\"row-even\"><td>\n26</td>\n<td>\n8</td>\n<td>\n916.5</td>\n<td>\n7.1602</td>\n</tr>\n<tr class=\"row-odd\"><td>\n27</td>\n<td>\n8</td>\n<td>\n948</td>\n<td>\n7.4063</td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-center\" id=\"id48\">\n<caption>Table 3 MCS Index Table 3 (Table 5.1.3.1-3 in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214))</caption>\n<colgroup>\n<col style=\"width: 22%\" />\n<col style=\"width: 23%\" />\n<col style=\"width: 29%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\">\nMCS Index\n$I_{MCS}$\n</th>\n<th class=\"head\">\nModulation Order\n$Q_m$\n</th>\n<th class=\"head\">\nTarget Coderate\n$R\\times[1024]$\n</th>\n<th class=\"head\">\nSpectral Efficiency\n\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td>\n0</td>\n<td>\n2</td>\n<td>\n30</td>\n<td>\n0.0586</td>\n</tr>\n<tr class=\"row-odd\"><td>\n1</td>\n<td>\n2</td>\n<td>\n40</td>\n<td>\n0.0781</td>\n</tr>\n<tr class=\"row-even\"><td>\n2</td>\n<td>\n2</td>\n<td>\n50</td>\n<td>\n0.0977</td>\n</tr>\n<tr class=\"row-odd\"><td>\n3</td>\n<td>\n2</td>\n<td>\n64</td>\n<td>\n0.1250</td>\n</tr>\n<tr class=\"row-even\"><td>\n4</td>\n<td>\n2</td>\n<td>\n78</td>\n<td>\n0.1523</td>\n</tr>\n<tr class=\"row-odd\"><td>\n5</td>\n<td>\n2</td>\n<td>\n99</td>\n<td>\n0.1934</td>\n</tr>\n<tr class=\"row-even\"><td>\n6</td>\n<td>\n2</td>\n<td>\n120</td>\n<td>\n0.2344</td>\n</tr>\n<tr class=\"row-odd\"><td>\n7</td>\n<td>\n2</td>\n<td>\n157</td>\n<td>\n0.3066</td>\n</tr>\n<tr class=\"row-even\"><td>\n8</td>\n<td>\n2</td>\n<td>\n193</td>\n<td>\n0.3770</td>\n</tr>\n<tr class=\"row-odd\"><td>\n9</td>\n<td>\n2</td>\n<td>\n251</td>\n<td>\n0.4902</td>\n</tr>\n<tr class=\"row-even\"><td>\n10</td>\n<td>\n2</td>\n<td>\n308</td>\n<td>\n0.6016</td>\n</tr>\n<tr class=\"row-odd\"><td>\n11</td>\n<td>\n2</td>\n<td>\n379</td>\n<td>\n0.7402</td>\n</tr>\n<tr class=\"row-even\"><td>\n12</td>\n<td>\n2</td>\n<td>\n449</td>\n<td>\n0.8770</td>\n</tr>\n<tr class=\"row-odd\"><td>\n13</td>\n<td>\n2</td>\n<td>\n526</td>\n<td>\n1.0273</td>\n</tr>\n<tr class=\"row-even\"><td>\n14</td>\n<td>\n2</td>\n<td>\n602</td>\n<td>\n1.1758</td>\n</tr>\n<tr class=\"row-odd\"><td>\n15</td>\n<td>\n4</td>\n<td>\n340</td>\n<td>\n1.3281</td>\n</tr>\n<tr class=\"row-even\"><td>\n16</td>\n<td>\n4</td>\n<td>\n378</td>\n<td>\n1.4766</td>\n</tr>\n<tr class=\"row-odd\"><td>\n17</td>\n<td>\n4</td>\n<td>\n434</td>\n<td>\n1.6953</td>\n</tr>\n<tr class=\"row-even\"><td>\n18</td>\n<td>\n4</td>\n<td>\n490</td>\n<td>\n1.9141</td>\n</tr>\n<tr class=\"row-odd\"><td>\n19</td>\n<td>\n4</td>\n<td>\n553</td>\n<td>\n2.1602</td>\n</tr>\n<tr class=\"row-even\"><td>\n20</td>\n<td>\n4</td>\n<td>\n616</td>\n<td>\n2.4063</td>\n</tr>\n<tr class=\"row-odd\"><td>\n21</td>\n<td>\n6</td>\n<td>\n438</td>\n<td>\n2.5564</td>\n</tr>\n<tr class=\"row-even\"><td>\n22</td>\n<td>\n6</td>\n<td>\n466</td>\n<td>\n2.7305</td>\n</tr>\n<tr class=\"row-odd\"><td>\n23</td>\n<td>\n6</td>\n<td>\n517</td>\n<td>\n3.0293</td>\n</tr>\n<tr class=\"row-even\"><td>\n24</td>\n<td>\n6</td>\n<td>\n567</td>\n<td>\n3.3223</td>\n</tr>\n<tr class=\"row-odd\"><td>\n25</td>\n<td>\n6</td>\n<td>\n616</td>\n<td>\n3.6094</td>\n</tr>\n<tr class=\"row-even\"><td>\n26</td>\n<td>\n6</td>\n<td>\n666</td>\n<td>\n3.9023</td>\n</tr>\n<tr class=\"row-odd\"><td>\n27</td>\n<td>\n6</td>\n<td>\n719</td>\n<td>\n4.2129</td>\n</tr>\n<tr class=\"row-even\"><td>\n28</td>\n<td>\n6</td>\n<td>\n772</td>\n<td>\n4.5234</td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-center\" id=\"id49\">\n<caption>Table 4 MCS Index Table 4 (Table 5.1.3.1-4 in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214))</caption>\n<colgroup>\n<col style=\"width: 22%\" />\n<col style=\"width: 23%\" />\n<col style=\"width: 29%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<thead>\n<tr class=\"row-odd\"><th class=\"head\">\nMCS Index\n$I_{MCS}$\n</th>\n<th class=\"head\">\nModulation Order\n$Q_m$\n</th>\n<th class=\"head\">\nTarget Coderate\n$R\\times[1024]$\n</th>\n<th class=\"head\">\nSpectral Efficiency\n\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td>\n0</td>\n<td>\n2</td>\n<td>\n120</td>\n<td>\n0.2344</td>\n</tr>\n<tr class=\"row-odd\"><td>\n1</td>\n<td>\n2</td>\n<td>\n193</td>\n<td>\n0.3770</td>\n</tr>\n<tr class=\"row-even\"><td>\n2</td>\n<td>\n2</td>\n<td>\n449</td>\n<td>\n0.8770</td>\n</tr>\n<tr class=\"row-odd\"><td>\n3</td>\n<td>\n4</td>\n<td>\n378</td>\n<td>\n1.4766</td>\n</tr>\n<tr class=\"row-even\"><td>\n4</td>\n<td>\n4</td>\n<td>\n490</td>\n<td>\n1.9141</td>\n</tr>\n<tr class=\"row-odd\"><td>\n5</td>\n<td>\n4</td>\n<td>\n616</td>\n<td>\n2.4063</td>\n</tr>\n<tr class=\"row-even\"><td>\n6</td>\n<td>\n6</td>\n<td>\n466</td>\n<td>\n2.7305</td>\n</tr>\n<tr class=\"row-odd\"><td>\n7</td>\n<td>\n6</td>\n<td>\n517</td>\n<td>\n3.0293</td>\n</tr>\n<tr class=\"row-even\"><td>\n8</td>\n<td>\n6</td>\n<td>\n567</td>\n<td>\n3.3223</td>\n</tr>\n<tr class=\"row-odd\"><td>\n9</td>\n<td>\n6</td>\n<td>\n616</td>\n<td>\n3.6094</td>\n</tr>\n<tr class=\"row-even\"><td>\n10</td>\n<td>\n6</td>\n<td>\n666</td>\n<td>\n3.9023</td>\n</tr>\n<tr class=\"row-odd\"><td>\n11</td>\n<td>\n6</td>\n<td>\n719</td>\n<td>\n4.2129</td>\n</tr>\n<tr class=\"row-even\"><td>\n12</td>\n<td>\n6</td>\n<td>\n772</td>\n<td>\n4.5234</td>\n</tr>\n<tr class=\"row-odd\"><td>\n13</td>\n<td>\n6</td>\n<td>\n822</td>\n<td>\n4.8154</td>\n</tr>\n<tr class=\"row-even\"><td>\n14</td>\n<td>\n6</td>\n<td>\n873</td>\n<td>\n5.1152</td>\n</tr>\n<tr class=\"row-odd\"><td>\n15</td>\n<td>\n8</td>\n<td>\n682.5</td>\n<td>\n5.3320</td>\n</tr>\n<tr class=\"row-even\"><td>\n16</td>\n<td>\n8</td>\n<td>\n711</td>\n<td>\n5.5547</td>\n</tr>\n<tr class=\"row-odd\"><td>\n17</td>\n<td>\n8</td>\n<td>\n754</td>\n<td>\n5.8906</td>\n</tr>\n<tr class=\"row-even\"><td>\n18</td>\n<td>\n8</td>\n<td>\n797</td>\n<td>\n6.2266</td>\n</tr>\n<tr class=\"row-odd\"><td>\n19</td>\n<td>\n8</td>\n<td>\n841</td>\n<td>\n6.5703</td>\n</tr>\n<tr class=\"row-even\"><td>\n20</td>\n<td>\n8</td>\n<td>\n885</td>\n<td>\n6.9141</td>\n</tr>\n<tr class=\"row-odd\"><td>\n21</td>\n<td>\n8</td>\n<td>\n916.5</td>\n<td>\n7.1602</td>\n</tr>\n<tr class=\"row-even\"><td>\n22</td>\n<td>\n8</td>\n<td>\n948</td>\n<td>\n7.4063</td>\n</tr>\n<tr class=\"row-odd\"><td>\n23</td>\n<td>\n10</td>\n<td>\n805.5</td>\n<td>\n7.8662</td>\n</tr>\n<tr class=\"row-even\"><td>\n24</td>\n<td>\n10</td>\n<td>\n853</td>\n<td>\n8.3301</td>\n</tr>\n<tr class=\"row-odd\"><td>\n25</td>\n<td>\n10</td>\n<td>\n900.5</td>\n<td>\n8.7939</td>\n</tr>\n<tr class=\"row-even\"><td>\n26</td>\n<td>\n10</td>\n<td>\n948</td>\n<td>\n9.2578</td>\n</tr>\n</tbody>\n</table>\n\n`property` `channel_type`\n\n5G NR physical channel type. Valid choices are PDSCH and PUSCH.\n\n\n`check_config`()[`[source]`](../_modules/sionna/nr/tb_config.html#TBConfig.check_config)\n\nTest if configuration is valid\n\n\n`property` `mcs_index`\n\nModulation and coding scheme (MCS) index (denoted as $I_{MCS}$\nin [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214))\n\n\n`property` `mcs_table`\n\nIndicates which MCS table from [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) to use. Starts with 1.\n\n\n`property` `n_id`\n\nData scrambling initialization\n$n_\\text{ID}$. Data Scrambling ID related to cell id and\nprovided by higher layer. If <cite>None</cite>, the\n[`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig) will automatically set\n$n_\\text{ID}=N_\\text{ID}^{cell}$.\nType\n\nint, None (default), [0, 1023]\n\n\n`property` `num_bits_per_symbol`\n\nModulation order as defined by the selected MCS\nType\n\nint, read-only\n\n\n`property` `target_coderate`\n\nTarget coderate of the TB as defined by the selected\nMCS\nType\n\nfloat, read-only\n\n\n`property` `tb_scaling`\n\nTB scaling factor for PDSCH as\ndefined in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) Tab. 5.1.3.2-2.\nType\n\nfloat, 1. (default), read-only"
"### TBEncoder\n\n`class` `sionna.nr.``TBEncoder`(*`target_tb_size`*, *`num_coded_bits`*, *`target_coderate`*, *`num_bits_per_symbol`*, *`num_layers=1`*, *`n_rnti=1`*, *`n_id=1`*, *`channel_type=\"PUSCH\"`*, *`codeword_index=0`*, *`use_scrambler=True`*, *`verbose=False`*, *`output_dtype=tf.float32`*, *`**kwargs`*)[`[source]`](../_modules/sionna/nr/tb_encoder.html#TBEncoder)\n\n5G NR transport block (TB) encoder as defined in TS 38.214\n[[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) and TS 38.211 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211)\n\nThe transport block (TB) encoder takes as input a <cite>transport block</cite> of\ninformation bits and generates a sequence of codewords for transmission.\nFor this, the information bit sequence is segmented into multiple codewords,\nprotected by additional CRC checks and FEC encoded. Further, interleaving\nand scrambling is applied before a codeword concatenation generates the\nfinal bit sequence. Fig. 1 provides an overview of the TB encoding\nprocedure and we refer the interested reader to [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) and\n[[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211) for further details.\n ig. 10 Fig. 1: Overview TB encoding (CB CRC does not always apply).\n\nIf `n_rnti` and `n_id` are given as list, the TBEncoder encodes\n<cite>num_tx = len(</cite> `n_rnti` <cite>)</cite> parallel input streams with different\nscrambling sequences per user.\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **target_tb_size** (*int*)  Target transport block size, i.e., how many information bits are\nencoded into the TB. Note that the effective TB size can be\nslightly different due to quantization. If required, zero padding\nis internally applied.\n- **num_coded_bits** (*int*)  Number of coded bits after TB encoding.\n- **target_coderate** (*float*)  Target coderate.\n- **num_bits_per_symbol** (*int*)  Modulation order, i.e., number of bits per QAM symbol.\n- **num_layers** (*int**, **1** (**default**) **|** [**1**,**...**,**8**]*)  Number of transmission layers.\n- **n_rnti** (*int** or **list of ints**, **1** (**default**) **|** [**0**,**...**,**65335**]*)  RNTI identifier provided by higher layer. Defaults to 1 and must be\nin range <cite>[0, 65335]</cite>. Defines a part of the random seed of the\nscrambler. If provided as list, every list entry defines the RNTI\nof an independent input stream.\n- **n_id** (*int** or **list of ints**, **1** (**default**) **|** [**0**,**...**,**1023**]*)  Data scrambling ID $n_\\text{ID}$ related to cell id and\nprovided by higher layer.\nDefaults to 1 and must be in range <cite>[0, 1023]</cite>. If provided as\nlist, every list entry defines the scrambling id of an independent\ninput stream.\n- **channel_type** (*str**, **\"PUSCH\"** (**default**) **| \"PDSCH\"*)  Can be either PUSCH or PDSCH.\n- **codeword_index** (*int**, **0** (**default**) **| 1*)  Scrambler can be configured for two codeword transmission.\n`codeword_index` can be either 0 or 1. Must be 0 for\n`channel_type` = PUSCH.\n- **use_scrambler** (*bool**, **True** (**default**)*)  If False, no data scrambling is applied (non standard-compliant).\n- **verbose** (*bool**, **False** (**default**)*)  If <cite>True</cite>, additional parameters are printed during initialization.\n- **dtype** (*tf.float32** (**default**)*)  Defines the datatype for internal calculations and the output dtype.\n\n\nInput\n\n**inputs** (*[,target_tb_size] or [,num_tx,target_tb_size], tf.float*)  2+D tensor containing the information bits to be encoded. If\n`n_rnti` and `n_id` are a list of size <cite>num_tx</cite>, the input must\nbe of shape <cite>[,num_tx,target_tb_size]</cite>.\n\nOutput\n\n*[,num_coded_bits], tf.float*  2+D tensor containing the sequence of the encoded codeword bits of\nthe transport block.\n\n\n**Note**\n\nThe parameters `tb_size` and `num_coded_bits` can be derived by the\n`calculate_tb_size()` function or\nby accessing the corresponding [`PUSCHConfig`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.PUSCHConfig) attributes.\n\n`property` `cb_crc_encoder`\n\nCB CRC encoder. <cite>None</cite> if no CB CRC is applied.\n\n\n`property` `coderate`\n\nEffective coderate of the TB after rate-matching including overhead\nfor the CRC.\n\n\n`property` `cw_lengths`\n\nEach list element defines the codeword length of each of the\ncodewords after LDPC encoding and rate-matching. The total number of\ncoded bits is $\\sum$ <cite>cw_lengths</cite>.\n\n\n`property` `k`\n\nNumber of input information bits. Equals <cite>tb_size</cite> except for zero\npadding of the last positions if the `target_tb_size` is quantized.\n\n\n`property` `k_padding`\n\nNumber of zero padded bits at the end of the TB.\n\n\n`property` `ldpc_encoder`\n\nLDPC encoder used for TB encoding.\n\n\n`property` `n`\n\nTotal number of output bits.\n\n\n`property` `num_cbs`\n\nNumber code blocks.\n\n\n`property` `num_tx`\n\nNumber of independent streams\n\n\n`property` `output_perm_inv`\n\nInverse interleaver pattern for output bit interleaver.\n\n\n`property` `scrambler`\n\nScrambler used for TB scrambling. <cite>None</cite> if no scrambler is used.\n\n\n`property` `tb_crc_encoder`\n\nTB CRC encoder\n\n\n`property` `tb_size`\n\nEffective number of information bits per TB.\nNote that (if required) internal zero padding can be applied to match\nthe request exact `target_tb_size`."
"### TBDecoder\n\n`class` `sionna.nr.``TBDecoder`(*`encoder`*, *`num_bp_iter``=``20`*, *`cn_type``=``'boxplus-phi'`*, *`output_dtype``=``tf.float32`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/nr/tb_decoder.html#TBDecoder)\n\n5G NR transport block (TB) decoder as defined in TS 38.214\n[[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214).\n\nThe transport block decoder takes as input a sequence of noisy channel\nobservations and reconstructs the corresponding <cite>transport block</cite> of\ninformation bits. The detailed procedure is described in TS 38.214\n[[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) and TS 38.211 [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211).\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **encoder** ([`TBEncoder`](https://nvlabs.github.io/sionna/api/nr.html#sionna.nr.TBEncoder))  Associated transport block encoder used for encoding of the signal.\n- **num_bp_iter** (*int**, **20** (**default**)*)  Number of BP decoder iterations\n- **cn_type** (*str**, **\"boxplus-phi\"** (**default**) **| \"boxplus\" | \"minsum\"*)  The check node processing function of the LDPC BP decoder.\nOne of {<cite>boxplus</cite>, <cite>boxplus-phi</cite>, <cite>minsum</cite>} where\nboxplus implements the single-parity-check APP decoding rule.\nboxplus-phi implements the numerical more stable version of\nboxplus [[Ryan]](fec.ldpc.html#ryan).\nminsum implements the min-approximation of the CN update rule\n[[Ryan]](fec.ldpc.html#ryan).\n- **output_dtype** (*tf.float32** (**default**)*)  Defines the datatype for internal calculations and the output dtype.\n\n\nInput\n\n**inputs** (*[,num_coded_bits], tf.float*)  2+D tensor containing channel logits/llr values of the (noisy)\nchannel observations.\n\nOutput\n\n- **b_hat** (*[,target_tb_size], tf.float*)  2+D tensor containing hard decided bit estimates of all information\nbits of the transport block.\n- **tb_crc_status** (*[], tf.bool*)  Transport block CRC status indicating if a transport block was\n(most likely) correctly recovered. Note that false positives are\npossible.\n\n\n`property` `k`\n\nNumber of input information bits. Equals TB size.\n\n\n`property` `n`\n\nTotal number of output codeword bits.\n\n\n`property` `tb_size`\n\nNumber of information bits per TB."
"### calculate_tb_size\n\n`sionna.nr.utils.``calculate_tb_size`(*`modulation_order`*, *`target_coderate`*, *`target_tb_size``=``None`*, *`num_coded_bits``=``None`*, *`num_prbs``=``None`*, *`num_ofdm_symbols``=``None`*, *`num_dmrs_per_prb``=``None`*, *`num_layers``=``1`*, *`num_ov``=``0`*, *`tb_scaling``=``1.0`*, *`verbose``=``True`*)[`[source]`](../_modules/sionna/nr/utils.html#calculate_tb_size)\n\nCalculates transport block (TB) size for given system parameters.\n\nThis function follows the basic procedure as defined in TS 38.214 Sec.\n5.1.3.2 and Sec. 6.1.4.2 [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214).\nParameters\n\n- **modulation_order** (*int*)  Modulation order, i.e., number of bits per QAM symbol.\n- **target_coderate** (*float*)  Target coderate.\n- **target_tb_size** (*None** (**default**) **| int*)  Target transport block size, i.e., how many information bits can be\nencoded into a slot for the given slot configuration. If provided,\n`num_prbs`, `num_ofdm_symbols` and `num_dmrs_per_prb` will be\nignored.\n- **num_coded_bits** (*None** (**default**) **| int*)  How many coded bits can be fit into a given slot. If provided,\n`num_prbs`, `num_ofdm_symbols` and `num_dmrs_per_prb` will be\nignored.\n- **num_prbs** (*None** (**default**) **| int*)  Total number of allocated PRBs per OFDM symbol where 1 PRB equals 12\nsubcarriers.\n- **num_ofdm_symbols** (*None** (**default**) **| int*)  Number of OFDM symbols allocated for transmission. Cannot be larger\nthan 14.\n- **num_dmrs_per_prb** (*None** (**default**) **| int*)  Number of DMRS (i.e., pilot) symbols per PRB that are NOT used for data\ntransmission. Sum over all `num_ofdm_symbols` OFDM symbols.\n- **num_layers** (*int**, **1** (**default**)*)  Number of MIMO layers.\n- **num_ov** (*int**, **0** (**default**)*)  Number of unused resource elements due to additional\noverhead as specified by higher layer.\n- **tb_scaling** (*float**, **0.25 | 0.5 | 1** (**default**)*)  TB scaling factor for PDSCH as defined in TS 38.214 Tab. 5.1.3.2-2.\nValid choices are 0.25, 0.5 and 1.0.\n- **verbose** (*bool**, **False** (**default**)*)  If True, additional information will be printed.\n\n\nReturns\n\n\n- *(tb_size, cb_size, num_cbs, cw_length, tb_crc_length, cb_crc_length, cw_lengths)*  Tuple:\n- **tb_size** (*int*)  Transport block size, i.e., how many information bits can be encoded\ninto a slot for the given slot configuration.\n- **cb_size** (*int*)  Code block (CB) size. Determines the number of\ninformation bits (including TB/CB CRC parity bits) per codeword.\n- **num_cbs** (*int*)  Number of code blocks. Determines into how many CBs the TB is segmented.\n- **cw_lengths** (*list of ints*)  Each list element defines the codeword length of each of the `num_cbs`\ncodewords after LDPC encoding and rate-matching. The total number of\ncoded bits is $\\sum$ `cw_lengths`.\n- **tb_crc_length** (*int*)  Length of the TB CRC.\n- **cb_crc_length** (*int*)  Length of each CB CRC.\n\n\n**Note**\n\nDue to rounding, `cw_lengths` (=length of each codeword after encoding),\ncan be slightly different within a transport block. Thus,\n`cw_lengths` is given as a list of ints where each list elements denotes\nthe number of codeword bits of the corresponding codeword after\nrate-matching."
"### generate_prng_seq\n\n`sionna.nr.utils.``generate_prng_seq`(*`length`*, *`c_init`*)[`[source]`](../_modules/sionna/nr/utils.html#generate_prng_seq)\n\nImplements pseudo-random sequence generator as defined in Sec. 5.2.1\nin [[3GPP38211]](https://nvlabs.github.io/sionna/api/nr.html#gpp38211) based on a length-31 Gold sequence.\nParameters\n\n- **length** (*int*)  Desired output sequence length.\n- **c_init** (*int*)  Initialization sequence of the PRNG. Must be in the range of 0 to\n$2^{32}-1$.\n\n\nOutput\n\n[`length`], ndarray of 0s and 1s  Containing the scrambling sequence.\n\n\n**Note**\n\nThe initialization sequence `c_init` is application specific and is\nusually provided be higher layer protocols."
"### select_mcs\n\n`sionna.nr.utils.``select_mcs`(*`mcs_index`*, *`table_index``=``1`*, *`channel_type``=``'PUSCH'`*, *`transform_precoding``=``False`*, *`pi2bpsk``=``False`*, *`verbose``=``False`*)[`[source]`](../_modules/sionna/nr/utils.html#select_mcs)\n\nSelects modulation and coding scheme (MCS) as specified in TS 38.214 [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214).\n\nImplements MCS tables as defined in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) for PUSCH and PDSCH.\nParameters\n\n- **mcs_index** (*int|** [**0**,**...**,**28**]*)  MCS index (denoted as $I_{MCS}$ in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214)).\n- **table_index** (*int**, **1** (**default**) **| 2 | 3 | 4*)  Indicates which MCS table from [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) to use. Starts with index 1.\n- **channel_type** (*str**, **\"PUSCH\"** (**default**) **| \"PDSCH\"*)  5G NR physical channel type. Valid choices are PDSCH and PUSCH.\n- **transform_precoding** (*bool**, **False** (**default**)*)  If True, the MCS tables as described in Sec. 6.1.4.1\nin [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) are applied. Only relevant for PUSCH.\n- **pi2bpsk** (*bool**, **False** (**default**)*)  If True, the higher-layer parameter <cite>tp-pi2BPSK</cite> as\ndescribed in Sec. 6.1.4.1 in [[3GPP38214]](https://nvlabs.github.io/sionna/api/nr.html#gpp38214) is applied. Only relevant\nfor PUSCH.\n- **verbose** (*bool**, **False** (**default**)*)  If True, additional information will be printed.\n\n\nReturns\n\n\n- *(modulation_order, target_rate)*  Tuple:\n- **modulation_order** (*int*)  Modulation order, i.e., number of bits per symbol.\n- **target_rate** (*float*)  Target coderate.\n\n\nReferences:\n3GPP38211([1](https://nvlabs.github.io/sionna/api/nr.html#id1),[2](https://nvlabs.github.io/sionna/api/nr.html#id4),[3](https://nvlabs.github.io/sionna/api/nr.html#id5),[4](https://nvlabs.github.io/sionna/api/nr.html#id6),[5](https://nvlabs.github.io/sionna/api/nr.html#id7),[6](https://nvlabs.github.io/sionna/api/nr.html#id8),[7](https://nvlabs.github.io/sionna/api/nr.html#id9),[8](https://nvlabs.github.io/sionna/api/nr.html#id10),[9](https://nvlabs.github.io/sionna/api/nr.html#id11),[10](https://nvlabs.github.io/sionna/api/nr.html#id12),[11](https://nvlabs.github.io/sionna/api/nr.html#id13),[12](https://nvlabs.github.io/sionna/api/nr.html#id14),[13](https://nvlabs.github.io/sionna/api/nr.html#id15),[14](https://nvlabs.github.io/sionna/api/nr.html#id17),[15](https://nvlabs.github.io/sionna/api/nr.html#id18),[16](https://nvlabs.github.io/sionna/api/nr.html#id19),[17](https://nvlabs.github.io/sionna/api/nr.html#id20),[18](https://nvlabs.github.io/sionna/api/nr.html#id30),[19](https://nvlabs.github.io/sionna/api/nr.html#id32),[20](https://nvlabs.github.io/sionna/api/nr.html#id35),[21](https://nvlabs.github.io/sionna/api/nr.html#id39))\n\n3GPP TS 38.211. NR; Physical channels and modulation.\n\n[3GPP38212](https://nvlabs.github.io/sionna/api/nr.html#id2)\n\n3GPP TS 38.212. NR; Multiplexing and channel coding\n\n3GPP38214([1](https://nvlabs.github.io/sionna/api/nr.html#id3),[2](https://nvlabs.github.io/sionna/api/nr.html#id16),[3](https://nvlabs.github.io/sionna/api/nr.html#id21),[4](https://nvlabs.github.io/sionna/api/nr.html#id22),[5](https://nvlabs.github.io/sionna/api/nr.html#id23),[6](https://nvlabs.github.io/sionna/api/nr.html#id24),[7](https://nvlabs.github.io/sionna/api/nr.html#id25),[8](https://nvlabs.github.io/sionna/api/nr.html#id26),[9](https://nvlabs.github.io/sionna/api/nr.html#id27),[10](https://nvlabs.github.io/sionna/api/nr.html#id28),[11](https://nvlabs.github.io/sionna/api/nr.html#id29),[12](https://nvlabs.github.io/sionna/api/nr.html#id31),[13](https://nvlabs.github.io/sionna/api/nr.html#id33),[14](https://nvlabs.github.io/sionna/api/nr.html#id34),[15](https://nvlabs.github.io/sionna/api/nr.html#id38),[16](https://nvlabs.github.io/sionna/api/nr.html#id40),[17](https://nvlabs.github.io/sionna/api/nr.html#id41),[18](https://nvlabs.github.io/sionna/api/nr.html#id42),[19](https://nvlabs.github.io/sionna/api/nr.html#id43),[20](https://nvlabs.github.io/sionna/api/nr.html#id44),[21](https://nvlabs.github.io/sionna/api/nr.html#id45))\n\n3GPP TS 38.214. NR; Physical layer procedures for data."
