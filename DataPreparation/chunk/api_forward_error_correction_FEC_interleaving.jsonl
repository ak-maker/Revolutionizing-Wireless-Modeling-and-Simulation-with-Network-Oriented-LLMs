"# Interleaving\n\nThe interleaver module allows to permute tensors with either pseudo-random permutations or by row/column swapping.\n\nTo simplify distributed graph execution (e.g., by running interleaver and deinterleaver in a different sub-graph/device), the interleavers are implemented stateless. Thus, the internal seed cannot be updated on runtime and does not change after the initialization. However, if required, an explicit random seed can be passed as additional input to the interleaver/deinterleaver pair when calling the layer.\n\nThe following code snippet shows how to setup and use an instance of the interleaver:\n```python\n# set-up system\ninterleaver = RandomInterleaver(seed=1234, # an explicit seed can be provided\n                                keep_batch_constant=False, # if True, all samples in the batch are permuted with the same pattern\n                                axis=-1) # axis which shall be permuted\ndeinterleaver = Deinterleaver(interleaver=interleaver) # connect interleaver and deinterleaver\n# --- simplified usage with fixed seed ---\n# c has arbitrary shape (rank>=2)\nc_int = interleaver(c)\n# call deinterleaver to reconstruct the original order\nc_deint = deinterleaver(c_int)\n# --- advanced usage ---\n# provide explicit seed if a new random seed should be used for each call\ns = tf.random.uniform((), minval=0, maxval=12345678, dtype=tf.int32)\nc_int = interleaver([c, s])\nc_deint = deinterleaver([c_int, s])\n```"
"### RowColumnInterleaver\n\n`class` `sionna.fec.interleaving.``RowColumnInterleaver`(*`row_depth`*, *`axis``=``-` `1`*, *`inverse``=``False`*, *`dtype``=``tf.float32`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#RowColumnInterleaver)\n\nInterleaves a sequence of inputs via row/column swapping.\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **row_depth** (*int*)  The row depth, i.e., how many values per row can be stored.\n- **axis** (*int*)  The dimension that should be interleaved. First dimension\n(<cite>axis=0</cite>) is not allowed.\n- **inverse** (*bool*)  A boolean defaults to False. If True, the inverse permutation is\nperformed.\n- **dtype** (*tf.DType*)  Defaults to <cite>tf.float32</cite>. Defines the datatype for internal\ncalculations and the output dtype.\n\n\nInput\n\n**inputs** (*tf.DType*)  2+D tensor of arbitrary shape and arbitrary dtype. Must have at\nleast rank two.\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as `inputs`.\n\nRaises\n\n- **AssertionError**  If `axis` is not an integer.\n- **AssertionError**  If `row_depth` is not an integer.\n- **AssertionError**  If `axis` > number of input dimensions.\n\n\n**Note**\n\nIf the sequence length is not a multiple of `row_depth`, additional\nfiller bits are used for the last row that will be removed internally.\nHowever, for the last positions the interleaving distance may be\nslightly degraded.\n\nTo permute the batch dimension, expand_dims at <cite>axis=0</cite>, interleave and\nremove new dimension.\n\n`property` `axis`\n\nAxis to be permuted.\n\n\n`call_inverse`(*`inputs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#RowColumnInterleaver.call_inverse)\n\nImplements deinterleaver function corresponding to call().\nInput\n\n**inputs** (*tf.DType*)  2+D tensor of arbitrary shape and arbitrary dtype. Must have at\nleast rank two.\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as `inputs`.\n\n\n`property` `keep_state`\n\nRow-column interleaver always uses same internal state.\n\n\n`property` `perm_seq`\n\nPermutation sequence.\n\n\n`property` `perm_seq_inv`\n\nInverse permutation sequence.\n\n\n`property` `row_depth`\n\nRow depth of the row-column interleaver."
"### RandomInterleaver\n\n`class` `sionna.fec.interleaving.``RandomInterleaver`(*`seed``=``None`*, *`keep_batch_constant``=``True`*, *`inverse``=``False`*, *`keep_state``=``True`*, *`axis``=``-` `1`*, *`dtype``=``tf.float32`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#RandomInterleaver)\n\nRandom interleaver permuting a sequence of input symbols.\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **seed** (*int*)  Integer defining the random seed used if option `keep_state` is\nTrue.\n- **keep_batch_constant** (*bool*)  Defaults to True. If set to True each sample in the batch uses the\nsame permutation. Otherwise, unique permutations per batch sample\nare generate (slower).\n- **inverse** (*bool*)  A boolean defaults to False. If True, the inverse permutation is\nperformed.\n- **keep_state** (*bool*)  A boolean defaults to True. If True, the permutation is fixed for\nmultiple calls (defined by `seed` attribute).\n- **axis** (*int*)  Defaults to <cite>-1</cite>. The dimension that should be interleaved.\nFirst dimension (<cite>axis=0</cite>) is not allowed.\n- **dtype** (*tf.DType*)  Defaults to <cite>tf.float32</cite>. Defines the datatype for internal\ncalculations and the output dtype.\n\n\nInput\n\n- **(x, seed)**  Either Tuple `(x,` `seed)` or `x` only (no tuple) if the internal\nseed should be used:\n- **x** (*tf.DType*)  2+D tensor of arbitrary shape and dtype.\n- **seed** (*int*)  An integer defining the state of the random number\ngenerator. If explicitly given, the global internal seed is\nreplaced by this seed. Can be used to realize random\ninterleaver/deinterleaver pairs (call with same random seed).\n\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as the input `x`.\n\nRaises\n\n- **AssertionError**  If `axis` is not <cite>int</cite>.\n- **AssertionError**  If `seed` is not <cite>None</cite> or <cite>int</cite>.\n- **AssertionError**  If `axis` > number of input dimensions.\n- **AssertionError**  If `inverse` is not bool.\n- **AssertionError**  If `keep_state` is not bool.\n- **AssertionError**  If `keep_batch_constant` is not bool.\n- **InvalidArgumentError**  When rank(`x`)<2.\n\n\n**Note**\n\nTo permute the batch dimension, expand_dims at `axis=0`, interleave\nand remove new dimension.\n\nThe interleaver layer is stateless, i.e., the seed is either random\nduring each call or must be explicitly provided during init/call.\nThis simplifies XLA/graph execution.\n\nThis is NOT the 5G interleaver sequence.\n\n`property` `axis`\n\nAxis to be permuted.\n\n\n`call_inverse`(*`inputs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#RandomInterleaver.call_inverse)\n\nImplements deinterleaver function corresponding to call().\nInput\n\n- **(x, seed)**  Either Tuple `(x,` `seed)` or `x` only (no tuple) if the internal\nseed should be used:\n- **x** (*tf.DType*)  2+D tensor of arbitrary shape and dtype.\n- **seed** (*int*)  An integer defining the state of the random number\ngenerator. If explicitly given, the global internal seed is\nreplaced by this seed. Can be used to realize random\ninterleaver/deinterleaver pairs (call with same random seed).\n\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as the input `x`.\n\nRaises\n\n- **InvalidArgumentError**  When rank(`x`)<2.\n- **ValueError**  If `keep_state` is False and no explicit seed is provided.\n\n\n**Note**\n\nIn case of inverse interleaving (e.g., at the receiver),\n`keep_state` should be True as otherwise a new permutation is\ngenerated and the output is not equal to the original sequence.\nAlternatively, an explicit seed must be provided as function\nargument.\n\n\n`find_s_min`(*`seed`*, *`seq_length`*, *`s_min_stop``=``0`*)[`[source]`](../_modules/sionna/fec/interleaving.html#RandomInterleaver.find_s_min)\n\nFind $S$ parameter such that $\\pi(i)-\\pi(j)>S$ for all\n$i-j<S$. This can be used to find optimized interleaver patterns.\n\n`s_min_stop` is an additional stopping condition, i.e., stop if\ncurrent $S$ is already smaller than `s_min_stop`.\n\nPlease note that this is a Numpy utility function and usually not part\nof the graph.\nInput\n\n- **seed** (*int*)  seed to draw random permutation that shall be analyzed.\n- **seq_length** (*int*)  length of permutation sequence to be analyzed.\n- **s_min_stop** (*int*)  Defaults to 0. Enables early stop if already current s_min< `s_min_stop` .\n\n\nOutput\n\n*float*  The S-parameter for the given `seed`.\n\n\n`property` `keep_state`\n\nGenerate new random seed per call.\n\n\n`property` `seed`\n\nSeed to generate random sequence."
"### Turbo3GPPInterleaver\n\n`class` `sionna.fec.interleaving.``Turbo3GPPInterleaver`(*`inverse``=``False`*, *`axis``=``-` `1`*, *`dtype``=``tf.float32`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#Turbo3GPPInterleaver)\n\nInterleaver as used in the 3GPP Turbo codes [[3GPPTS36212_I]](https://nvlabs.github.io/sionna/api/fec.interleaving.html#gppts36212-i) and, thus,\nthe maximum length is given as 6144 elements (only for the dimension as\nspecific by `axis`).\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **inverse** (*bool*)  A boolean defaults to False. If True, the inverse permutation is\nperformed.\n- **axis** (*int*)  Defaults to <cite>-1</cite>. The dimension that should be interleaved.\nFirst dimension (<cite>axis=0</cite>) is not allowed.\n- **dtype** (*tf.DType*)  Defaults to <cite>tf.float32</cite>. Defines the datatype for internal\ncalculations and the output dtype.\n\n\nInput\n\n**x** (*tf.DType*)  2+D tensor of arbitrary shape and dtype.\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as the input `x`.\n\nRaises\n\n- **AssertionError**  If `axis` is not <cite>int</cite>.\n- **AssertionError**  If `axis` > number of input dimensions.\n- **AssertionError**  If `inverse` is not bool.\n- **InvalidArgumentError**  When rank(`x`)<2.\n\n\n**Note**\n\nNote that this implementation slightly deviates from the 3GPP\nstandard [[3GPPTS36212_I]](https://nvlabs.github.io/sionna/api/fec.interleaving.html#gppts36212-i) in a sense that zero-padding is introduced\nfor cases when the exact interleaver length is not supported by the\nstandard.\n\n`property` `axis`\n\nAxis to be permuted.\n\n\n`call_inverse`(*`inputs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#Turbo3GPPInterleaver.call_inverse)\n\nImplements deinterleaver function corresponding to call().\nInput\n\n**x** (*tf.DType*)  2+D tensor of arbitrary shape and dtype.\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as the input `x`.\n\nRaises\n\n**InvalidArgumentError**  When rank(`x`)<2.\n\n\n`find_s_min`(*`frame_size`*, *`s_min_stop``=``0`*)[`[source]`](../_modules/sionna/fec/interleaving.html#Turbo3GPPInterleaver.find_s_min)\n\nFind $S$ parameter such that $\\pi(i)-\\pi(j)>S$ for all\n$i-j<S$. This can be used to find optimized interleaver patterns.\n\n`s_min_stop` is an additional stopping condition, i.e., stop if\ncurrent $S$ is already smaller than `s_min_stop`.\n\nPlease note that this is a Numpy utility function and usually not part\nof the graph.\nInput\n\n- **frame_size** (*int*)  length of interleaver.\n- **s_min_stop** (*int*)  Defaults to 0. Enables early stop if already current\ns_min<`s_min_stop`.\n\n\nOutput\n\n*float*  The S-parameter for the given `frame_size`."
"## Deinterleaver\n\n`class` `sionna.fec.interleaving.``Deinterleaver`(*`interleaver`*, *`dtype``=``None`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/fec/interleaving.html#Deinterleaver)\n\nDeinterleaver that reverts the interleaver for a given input sequence.\n\nThe class inherits from the Keras layer class and can be used as layer in a\nKeras model.\nParameters\n\n- **interleaver** (*Interleaver*)  Associated Interleaver which shall be deinterleaved by this layer.\nCan be either\n[`RandomInterleaver`](https://nvlabs.github.io/sionna/api/fec.interleaving.html#sionna.fec.interleaving.RandomInterleaver) or\n[`RowColumnInterleaver`](https://nvlabs.github.io/sionna/api/fec.interleaving.html#sionna.fec.interleaving.RowColumnInterleaver).\n- **dtype** (*None** or **tf.DType*)  Defaults to <cite>None</cite>. Defines the datatype for internal calculations\nand the output dtype. If no explicit dtype is provided the dtype\nfrom the associated interleaver is used.\n\n\nInput\n\n- **(x, seed)**  Either Tuple `(x,` `seed)` or `x` only (no tuple) if the internal\nseed should be used:\n- **x** (*tf.DType*)  2+D tensor of arbitrary shape.\n- **seed** (*int*)  An integer defining the state of the random number\ngenerator. If explicitly given, the global internal seed is\nreplaced by this seed. Can be used to realize random\ninterleaver/deinterleaver pairs (call with same random seed).\n\n\nOutput\n\n*tf.DType*  2+D tensor of same shape and dtype as the input `x`.\n\nRaises\n\n**AssertionError**  If `interleaver` is not a valid instance of Interleaver.\n\n\n**Note**\n\nThis layer provides a wrapper of the inverse interleaver function.\n\n`property` `interleaver`\n\nAssociated interleaver instance.\n\n\nReferences:\n<blockquote>\n<div>\n3GPPTS36212_I([1](https://nvlabs.github.io/sionna/api/fec.interleaving.html#id1),[2](https://nvlabs.github.io/sionna/api/fec.interleaving.html#id2))\n\nETSI 3GPP TS 36.212 Evolved Universal Terrestrial\nRadio Access (EUTRA); Multiplexing and channel coding, v.15.3.0, 2018-09.\n\n\n</blockquote></blockquote>\n</blockquote></blockquote>"
