"# Optical\n\nThis module provides layers and functions that implement channel models for (fiber) optical communications.\nThe currently only available model is the split-step Fourier method ([`SSFM`](https://nvlabs.github.io/sionna/api/channel.optical.html#sionna.channel.SSFM), for dual- and\nsingle-polarization) that can be combined with an Erbium-doped amplifier ([`EDFA`](https://nvlabs.github.io/sionna/api/channel.optical.html#sionna.channel.EDFA)).\n\nThe following code snippets show how to setup and simulate the transmission\nover a single-mode fiber (SMF) by using the split-step Fourier method.\n```python\n# init fiber\nspan = sionna.channel.optical.SSFM(\n                              alpha=0.046,\n                              beta_2=-21.67,\n                              f_c=193.55e12,\n                              gamma=1.27,\n                              length=80,\n                              n_ssfm=200,\n                              n_sp=1.0,\n                              t_norm=1e-12,\n                              with_amplification=False,\n                              with_attenuation=True,\n                              with_dispersion=True,\n                              with_nonlinearity=True,\n                              dtype=tf.complex64)\n# init amplifier\namplifier = sionna.channel.optical.EDFA(\n                              g=4.0,\n                              f=2.0,\n                              f_c=193.55e12,\n                              dt=1.0e-12)\n@tf.function\ndef simulate_transmission(x, n_span):\n      y = x\n      # simulate n_span fiber spans\n      for _ in range(n_span):\n            # simulate single span\n            y = span(y)\n            # simulate amplifier\n            y = amplifier(y)\n      return y\n```\n\n\nRunning the channel model is done as follows:\n```python\n# x is the optical input signal, n_span the number of spans\ny = simulate_transmission(x, n_span)\n```\n\n\nFor further details, the tutorial [Optical Channel with Lumped Amplification](../examples/Optical_Lumped_Amplification_Channel.html)  provides more sophisticated examples of how to use this module.\n\nFor the purpose of the present document, the following symbols apply:\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 30%\" />\n<col style=\"width: 70%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td>\n$T_\\text{norm}$</td>\n<td>\nTime normalization for the SSFM in $(\\text{s})$</td>\n</tr>\n<tr class=\"row-even\"><td>\n$L_\\text{norm}$</td>\n<td>\nDistance normalization the for SSFM in $(\\text{m})$</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$W$</td>\n<td>\nBandwidth</td>\n</tr>\n<tr class=\"row-even\"><td>\n$\\alpha$</td>\n<td>\nAttenuation coefficient in $(1/L_\\text{norm})$</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$\\beta_2$</td>\n<td>\nGroup velocity dispersion coeff. in $(T_\\text{norm}^2/L_\\text{norm})$</td>\n</tr>\n<tr class=\"row-even\"><td>\n$f_\\mathrm{c}$</td>\n<td>\nCarrier frequency in  $\\text{(Hz)}$</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$\\gamma$</td>\n<td>\nNonlinearity coefficient in $(1/L_\\text{norm}/\\text{W})$</td>\n</tr>\n<tr class=\"row-even\"><td>\n$\\ell$</td>\n<td>\nFiber length in $(L_\\text{norm})$</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$h$</td>\n<td>\nPlanck constant</td>\n</tr>\n<tr class=\"row-even\"><td>\n$N_\\mathrm{SSFM}$</td>\n<td>\nNumber of SSFM simulation steps</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$n_\\mathrm{sp}$</td>\n<td>\nSpontaneous emission factor of Raman amplification</td>\n</tr>\n<tr class=\"row-even\"><td>\n$\\Delta_t$</td>\n<td>\nNormalized simulation time step in $(T_\\text{norm})$</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$\\Delta_z$</td>\n<td>\nNormalized simulation step size in $(L_\\text{norm})$</td>\n</tr>\n<tr class=\"row-even\"><td>\n$G$</td>\n<td>\nAmplifier gain</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$F$</td>\n<td>\nAmplifiers noise figure</td>\n</tr>\n<tr class=\"row-even\"><td>\n$\\rho_\\text{ASE}$</td>\n<td>\nNoise spectral density</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$P$</td>\n<td>\nSignal power</td>\n</tr>\n<tr class=\"row-even\"><td>\n$\\hat{D}$</td>\n<td>\nLinear SSFM operator [[A2012]](https://nvlabs.github.io/sionna/api/channel.optical.html#a2012)</td>\n</tr>\n<tr class=\"row-odd\"><td>\n$\\hat{N}$</td>\n<td>\nNon-linear SSFM operator [[A2012]](https://nvlabs.github.io/sionna/api/channel.optical.html#a2012)</td>\n</tr>\n<tr class=\"row-even\"><td>\n$f_\\textrm{sim}$</td>\n<td>\nSimulation bandwidth</td>\n</tr>\n</tbody>\n</table>\n\n**Remark:** Depending on the exact simulation parameters, the SSFM algorithm may require `dtype=tf.complex128` for accurate simulation results. However, this may increase the simulation complexity significantly."
"## Split-step Fourier method\n\n`class` `sionna.channel.``SSFM`(*`alpha``=``0.046`*, *`beta_2``=``-` `21.67`*, *`f_c``=``193.55e12`*, *`gamma``=``1.27`*, *`half_window_length``=``0`*, *`length``=``80`*, *`n_ssfm``=``1`*, *`n_sp``=``1.0`*, *`sample_duration``=``1.0`*, *`t_norm``=``1e-12`*, *`with_amplification``=``False`*, *`with_attenuation``=``True`*, *`with_dispersion``=``True`*, *`with_manakov``=``False`*, *`with_nonlinearity``=``True`*, *`swap_memory``=``True`*, *`dtype``=``tf.complex64`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/channel/optical/fiber.html#SSFM)\n\nLayer implementing the split-step Fourier method (SSFM)\n\nThe SSFM (first mentioned in [[HT1973]](https://nvlabs.github.io/sionna/api/channel.optical.html#ht1973)) numerically solves the generalized\nnonlinear Schrdinger equation (NLSE)\n\n$$\n\\frac{\\partial E(t,z)}{\\partial z}=-\\frac{\\alpha}{2} E(t,z)+j\\frac{\\beta_2}{2}\\frac{\\partial^2 E(t,z)}{\\partial t^2}-j\\gamma |E(t,z)|^2 E(t,z) + n(n_{\\text{sp}};\\,t,\\,z)\n$$\n\nfor an unpolarized (or single polarized) optical signal;\nor the Manakov equation (according to [[WMC1991]](https://nvlabs.github.io/sionna/api/channel.optical.html#wmc1991))\n\n$$\n\\frac{\\partial \\mathbf{E}(t,z)}{\\partial z}=-\\frac{\\alpha}{2} \\mathbf{E}(t,z)+j\\frac{\\beta_2}{2}\\frac{\\partial^2 \\mathbf{E}(t,z)}{\\partial t^2}-j\\gamma \\frac{8}{9}||\\mathbf{E}(t,z)||_2^2 \\mathbf{E}(t,z) + \\mathbf{n}(n_{\\text{sp}};\\,t,\\,z)\n$$\n\nfor dual polarization, with attenuation coefficient $\\alpha$, group\nvelocity dispersion parameters $\\beta_2$, and nonlinearity\ncoefficient $\\gamma$. The noise terms $n(n_{\\text{sp}};\\,t,\\,z)$\nand $\\mathbf{n}(n_{\\text{sp}};\\,t,\\,z)$, respectively, stem from\nan (optional) ideally distributed Raman amplification with\nspontaneous emission factor $n_\\text{sp}$. The optical signal\n$E(t,\\,z)$ has the unit $\\sqrt{\\text{W}}$. For the dual\npolarized case, $\\mathbf{E}(t,\\,z)=(E_x(t,\\,z), E_y(t,\\,z))$\nis a vector consisting of the signal components of both polarizations.\n\nThe symmetrized SSFM is applied according to Eq. (7) of [[FMF1976]](https://nvlabs.github.io/sionna/api/channel.optical.html#fmf1976) that\ncan be written as\n\n$$\nE(z+\\Delta_z,t) \\approx \\exp\\left(\\frac{\\Delta_z}{2}\\hat{D}\\right)\\exp\\left(\\int^{z+\\Delta_z}_z \\hat{N}(z')dz'\\right)\\exp\\left(\\frac{\\Delta_z}{2}\\hat{D}\\right)E(z,\\,t)\n$$\n\nwhere only the single-polarized case is shown. The integral is\napproximated by $\\Delta_z\\hat{N}$ with $\\hat{D}$ and\n$\\hat{N}$ denoting the linear and nonlinear SSFM operator,\nrespectively [[A2012]](https://nvlabs.github.io/sionna/api/channel.optical.html#a2012).\n\nAdditionally, ideally distributed Raman amplification may be applied, which\nis implemented as in [[MFFP2009]](https://nvlabs.github.io/sionna/api/channel.optical.html#mffp2009). Please note that the implemented\nRaman amplification currently results in a transparent fiber link. Hence,\nthe introduced gain cannot be parametrized.\n\nThe SSFM operates on normalized time $T_\\text{norm}$\n(e.g., $T_\\text{norm}=1\\,\\text{ps}=1\\cdot 10^{-12}\\,\\text{s}$) and\ndistance units $L_\\text{norm}$\n(e.g., $L_\\text{norm}=1\\,\\text{km}=1\\cdot 10^{3}\\,\\text{m}$).\nHence, all parameters as well as the signal itself have to be given with the\nsame unit prefix for the\nsame unit (e.g., always pico for time, or kilo for distance). Despite the normalization,\nthe SSFM is implemented with physical\nunits, which is different from the normalization, e.g., used for the\nnonlinear Fourier transform. For simulations, only $T_\\text{norm}$ has to be\nprovided.\n\nTo avoid reflections at the signal boundaries during simulation, a Hamming\nwindow can be applied in each SSFM-step, whose length can be\ndefined by `half_window_length`.\n xample\n\nSetting-up:"
"```python\n>>> ssfm = SSFM(\n>>>     alpha=0.046,\n>>>     beta_2=-21.67,\n>>>     f_c=193.55e12,\n>>>     gamma=1.27,\n>>>     half_window_length=100,\n>>>     length=80,\n>>>     n_ssfm=200,\n>>>     n_sp=1.0,\n>>>     t_norm=1e-12,\n>>>     with_amplification=False,\n>>>     with_attenuation=True,\n>>>     with_dispersion=True,\n>>>     with_manakov=False,\n>>>     with_nonlinearity=True)\n```\n\n\nRunning:\n```python\n>>> # x is the optical input signal\n>>> y = ssfm(x)\n```\n\nParameters\n\n- **alpha** (*float*)  Attenuation coefficient $\\alpha$ in $(1/L_\\text{norm})$.\nDefaults to 0.046.\n- **beta_2** (*float*)  Group velocity dispersion coefficient $\\beta_2$ in $(T_\\text{norm}^2/L_\\text{norm})$.\nDefaults to -21.67\n- **f_c** (*float*)  Carrier frequency $f_\\mathrm{c}$ in $(\\text{Hz})$.\nDefaults to 193.55e12.\n- **gamma** (*float*)  Nonlinearity coefficient $\\gamma$ in $(1/L_\\text{norm}/\\text{W})$.\nDefaults to 1.27.\n- **half_window_length** (*int*)  Half of the Hamming window length. Defaults to 0.\n- **length** (*float*)  Fiber length $\\ell$ in $(L_\\text{norm})$.\nDefaults to 80.0.\n- **n_ssfm** (*int | \"adaptive\"*)  Number of steps $N_\\mathrm{SSFM}$.\nSet to adaptive to use nonlinear-phase rotation to calculate\nthe step widths adaptively (maxmimum rotation can be set in phase_inc).\nDefaults to 1.\n- **n_sp** (*float*)  Spontaneous emission factor $n_\\mathrm{sp}$ of Raman amplification.\nDefaults to 1.0.\n- **sample_duration** (*float*)  Normalized time step $\\Delta_t$ in $(T_\\text{norm})$.\nDefaults to 1.0.\n- **t_norm** (*float*)  Time normalization $T_\\text{norm}$ in $(\\text{s})$.\nDefaults to 1e-12.\n- **with_amplification** (*bool*)  Enable ideal inline amplification and corresponding\nnoise. Defaults to <cite>False</cite>.\n- **with_attenuation** (*bool*)  Enable attenuation. Defaults to <cite>True</cite>.\n- **with_dispersion** (*bool*)  Apply chromatic dispersion. Defaults to <cite>True</cite>.\n- **with_manakov** (*bool*)  Considers axis [-2] as x- and y-polarization and calculates the\nnonlinear step as given by the Manakov equation. Defaults to <cite>False.</cite>\n- **with_nonlinearity** (*bool*)  Apply Kerr nonlinearity. Defaults to <cite>True</cite>.\n- **phase_inc** (*float*)  Maximum nonlinear-phase rotation in rad allowed during simulation.\nTo be used with `n_ssfm` = adaptive.\nDefaults to 1e-4.\n- **swap_memory** (*bool*)  Use CPU memory for while loop. Defaults to <cite>True</cite>.\n- **dtype** (*tf.complex*)  Defines the datatype for internal calculations and the output\ndtype. Defaults to <cite>tf.complex64</cite>.\n\n\nInput\n\n**x** (*[,n] or [,2,n], tf.complex*)  Input signal in $(\\sqrt{\\text{W}})$. If `with_manakov` is <cite>True</cite>,\nthe second last dimension is interpreted as x- and y-polarization,\nrespectively.\n\nOutput\n\n**y** (Tensor with same shape as `x`, <cite>tf.complex</cite>)  Channel output"
"## Erbium-doped fiber amplifier\n\n`class` `sionna.channel.``EDFA`(*`g``=``4.0`*, *`f``=``7.0`*, *`f_c``=``193.55e12`*, *`dt``=``1e-12`*, *`with_dual_polarization``=``False`*, *`dtype``=``tf.complex64`*, *`**``kwargs`*)[`[source]`](../_modules/sionna/channel/optical/edfa.html#EDFA)\n\nLayer implementing a model of an Erbium-Doped Fiber Amplifier\n\nAmplifies the optical input signal by a given gain and adds\namplified spontaneous emission (ASE) noise.\n\nThe noise figure including the noise due to beating of signal and\nspontaneous emission is $F_\\mathrm{ASE,shot} =\\frac{\\mathrm{SNR}\n_\\mathrm{in}}{\\mathrm{SNR}_\\mathrm{out}}$,\nwhere ideally the detector is limited by shot noise only, and\n$\\text{SNR}$ is the signal-to-noise-ratio. Shot noise is\nneglected here but is required to derive the noise power of the amplifier, as\notherwise the input SNR is infinitely large. Hence, for the input SNR,\nit follows [[A2012]](https://nvlabs.github.io/sionna/api/channel.optical.html#a2012) that\n$\\mathrm{SNR}_\\mathrm{in}=\\frac{P}{2hf_cW}$, where $h$ denotes\nPlancks constant, $P$ is the signal power, and $W$ the\nconsidered bandwidth.\nThe output SNR is decreased by ASE noise induced by the amplification.\nNote that shot noise is applied after the amplifier and is hence not\namplified. It results that $\\mathrm{SNR}_\\mathrm{out}=\\frac{GP}{\\left\n(4\\rho_\\mathrm{ASE}+2hf_c\\right)W}$, where $G$ is the\nparametrized gain.\nHence, one can write the former equation as $F_\\mathrm{ASE,shot} = 2\nn_\\mathrm{sp} \\left(1-G^{-1}\\right) + G^{-1}$.\nDropping shot noise again results in $F = 2 n_\\mathrm{sp} \\left(1-G^\n{-1}\\right)=2 n_\\mathrm{sp} \\frac{G-1}{G}$.\n\nFor a transparent link, e.g., the required gain per span is $G =\n\\exp\\left(\\alpha \\ell \\right)$.\nThe spontaneous emission factor is $n_\\mathrm{sp}=\\frac{F}\n{2}\\frac{G}{G-1}$.\nAccording to [[A2012]](https://nvlabs.github.io/sionna/api/channel.optical.html#a2012) and [[EKWFG2010]](https://nvlabs.github.io/sionna/api/channel.optical.html#ekwfg2010) combined with [[BGT2000]](https://nvlabs.github.io/sionna/api/channel.optical.html#bgt2000) and [[GD1991]](https://nvlabs.github.io/sionna/api/channel.optical.html#gd1991),\nthe noise power spectral density of the EDFA per state of\npolarization is obtained as $\\rho_\\mathrm{ASE}^{(1)} = n_\\mathrm{sp}\\left\n(G-1\\right) h f_c=\\frac{1}{2}G F h f_c$.\nAt simulation frequency $f_\\mathrm{sim}$, the noise has a power of\n$P_\\mathrm{ASE}^{(1)}=\\sigma_\\mathrm{n,ASE}^2=2\\rho_\\mathrm{ASE}^{(1)}\n\\cdot f_\\mathrm{sim}$,\nwhere the factor $2$ accounts for the unpolarized noise (for dual\npolarization the factor is $1$ per polarization).\nHere, the notation $()^{(1)}$ means that this is the noise introduced by a\nsingle EDFA.\n\nThis class inherits from the Keras <cite>Layer</cite> class and can be used as layer in\na Keras model.\n xample\n\nSetting-up:"
"```python\n>>> edfa = EDFA(\n>>>     g=4.0,\n>>>     f=2.0,\n>>>     f_c=193.55e12,\n>>>     dt=1.0e-12,\n>>>     with_dual_polarization=False)\n```\n\n\nRunning:\n```python\n>>> # x is the optical input signal\n>>> y = EDFA(x)\n```\n\nParameters\n\n- **g** (*float*)  Amplifier gain (linear domain). Defaults to 4.0.\n- **f** (*float*)  Noise figure (linear domain). Defaults to 7.0.\n- **f_c** (*float*)  Carrier frequency $f_\\mathrm{c}$ in $(\\text{Hz})$.\nDefaults to 193.55e12.\n- **dt** (*float*)  Time step $\\Delta_t$ in $(\\text{s})$.\nDefaults to 1e-12.\n- **with_dual_polarization** (*bool*)  Considers axis [-2] as x- and y-polarization and applies the noise\nper polarization. Defaults to <cite>False</cite>.\n- **dtype** (*tf.complex*)  Defines the datatype for internal calculations and the output\ndtype. Defaults to <cite>tf.complex64</cite>.\n\n\nInput\n\n**x** (*Tensor, tf.complex*)  Optical input signal\n\nOutput\n\n**y** (Tensor with same shape as `x`, `dtype`)  Amplifier output"
"### time_frequency_vector\n\n`sionna.channel.utils.``time_frequency_vector`(*`num_samples`*, *`sample_duration`*, *`dtype``=``tf.float32`*)[`[source]`](../_modules/sionna/channel/utils.html#time_frequency_vector)\n\nCompute the time and frequency vector for a given number of samples\nand duration per sample in normalized time unit.\n```python\n>>> t = tf.cast(tf.linspace(-n_min, n_max, num_samples), dtype) * sample_duration\n>>> f = tf.cast(tf.linspace(-n_min, n_max, num_samples), dtype) * 1/(sample_duration*num_samples)\n```\n\nInput\n\n- **num_samples** (*int*)  Number of samples\n- **sample_duration** (*float*)  Sample duration in normalized time\n- **dtype** (*tf.DType*)  Datatype to use for internal processing and output.\nDefaults to <cite>tf.float32</cite>.\n\n\nOutput\n\n- **t** ([`num_samples`], `dtype`)  Time vector\n- **f** ([`num_samples`], `dtype`)  Frequency vector\n\n\nReferences:\n[HT1973](https://nvlabs.github.io/sionna/api/channel.optical.html#id3)\n\nR. H. Hardin and F. D. Tappert,\nApplications of the Split-Step Fourier Method to the Numerical Solution of Nonlinear and Variable Coefficient Wave Equations.,\nSIAM Review Chronicles, Vol. 15, No. 2, Part 1, p 423, 1973.\n\n[FMF1976](https://nvlabs.github.io/sionna/api/channel.optical.html#id5)\n\nJ. A. Fleck, J. R. Morris, and M. D. Feit,\nTime-dependent Propagation of High Energy Laser Beams Through the Atmosphere,\nAppl. Phys., Vol. 10, pp 129160, 1976.\n\n[MFFP2009](https://nvlabs.github.io/sionna/api/channel.optical.html#id7)\n\nN. J. Muga, M. C. Fugihara, M. F. S. Ferreira, and A. N. Pinto,\nASE Noise Simulation in Raman Amplification Systems,\nConftele, 2009.\n\nA2012([1](https://nvlabs.github.io/sionna/api/channel.optical.html#id1),[2](https://nvlabs.github.io/sionna/api/channel.optical.html#id2),[3](https://nvlabs.github.io/sionna/api/channel.optical.html#id6),[4](https://nvlabs.github.io/sionna/api/channel.optical.html#id8),[5](https://nvlabs.github.io/sionna/api/channel.optical.html#id9))\n\nG. P. Agrawal,\nFiber-optic Communication Systems,\n4th ed. Wiley series in microwave and optical engineering 222. New York: Wiley, 2010.\n\n[EKWFG2010](https://nvlabs.github.io/sionna/api/channel.optical.html#id10)\n\nR. J. Essiambre, G. Kramer, P. J. Winzer, G. J. Foschini, and B. Goebel,\nCapacity Limits of Optical Fiber Networks,\nJournal of Lightwave Technology 28, No. 4, 2010.\n\n[BGT2000](https://nvlabs.github.io/sionna/api/channel.optical.html#id11)\n\nD. M. Baney, P. Gallion, and R. S. Tucker,\nTheory and Measurement Techniques for the Noise Figure of Optical Amplifiers,\nOptical Fiber Technology 6, No. 2, 2000.\n\n[GD1991](https://nvlabs.github.io/sionna/api/channel.optical.html#id12)\n\nC.R. Giles, and E. Desurvire,\nModeling Erbium-Doped Fiber Amplifiers,\nJournal of Lightwave Technology 9, No. 2, 1991.\n\n[WMC1991](https://nvlabs.github.io/sionna/api/channel.optical.html#id4)\n\nP. K. A. Wai, C. R. Menyuk, and H. H. Chen,\nStability of Solitons in Randomly Varying Birefringent Fibers,\nOptics Letters, No. 16, 1991."
